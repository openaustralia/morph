---
# TODO: Ensure that deploy user is setup first
# TODO: Ensure that nginx is setup first
- name: Ensure git is installed
  apt: pkg=git

- name: Ensure /var/www/shared/config exists and it is owned by deploy
  file:
    owner: deploy
    group: deploy
    path: "{{ item }}"
    state: directory
  loop:
    - /var/www
    - /var/www/shared
    - /var/www/shared/config
    - /var/www/placeholder

- name: Link current to placeholder if not deployed so systemd export works
  file:
    src: /var/www/placeholder
    dest: /var/www/current
    state: link
    owner: deploy
    force: no

- name: Copy across 2048-bit certificate for Diffie Hellman Ephemeral Parameters
  copy: src=ssl/dhparam.pem dest=/etc/nginx/dhparam.pem

# In development just use self-signed certificate generated by running:
# https://github.com/openaustralia/infrastructure/blob/master/certificates/generate-certificates.sh
# and put them in provisioning/roles/morph-app/files/ssl
# This is a temporary measure until we move the provisioning for morph
# to the infrastructure repo.
- name: Create fake let's encrypt directories when in development
  file:
    state: directory
    path: "/etc/letsencrypt/live/{{ server_name }}"
  when: "'development' in group_names"

- name: Copy SSL certificates for development
  copy:
    src: "ssl/{{ server_name }}.pem"
    # We're faking it as if these are let's encrypt certs. Makes for less magic config
    dest: "/etc/letsencrypt/live/{{ server_name }}/fullchain.pem"
    mode: 0644
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: restart nginx

- name: Copy SSL keys for development
  copy:
    src: "ssl/{{ server_name }}.key"
    dest: "/etc/letsencrypt/live/{{ server_name }}/privkey.pem"
    mode: 0640
  # Only run this task when this machine is the development group
  when: "'development' in group_names"
  notify: restart nginx

- name: Generate the overall nginx config
  template: src=nginx.conf dest=/etc/nginx/nginx.conf
  notify: restart nginx

- name: Generate the nginx config for the app
  template: src={{ item }} dest=/etc/nginx/sites-available/ owner=root group=root mode=644
  notify: restart nginx
  with_fileglob:
    - ../templates/sites/*

- name: Make the separate nginx sites active
  command: ln -s /etc/nginx/sites-available/{{ item | basename }} /etc/nginx/sites-enabled/{{ item | basename }} creates=/etc/nginx/sites-enabled/{{ item | basename }}
  notify: restart nginx
  with_fileglob:
    - ../templates/sites/*

- name: Ensure that .env exists
  template: src=env dest=/var/www/shared/.env owner=deploy group=deploy
  # TODO: If this changes we should rerun foreman as well

- name: Install Morph Github App private key
  copy:
    src: morph-github-app.private-key.pem
    dest: /var/www/shared/config
    owner: deploy
    group: deploy
    mode: 0400

- name: Copy Gemfile to install gems before first deploy
  copy:
    src: "../{{ item }}"
    dest: "/home/deploy/{{ item }}"
    owner: deploy
    group: deploy
  loop:
    - Gemfile
    - Gemfile.lock

- name: Install gems
  command: /bin/bash -lc "rvm ruby-{{ ruby_version }} do bundle install"
  args:
    chdir: /home/deploy
  become_user: deploy
  # Disable use of PTY as it sometimes hangs
  async: 600
  poll: 2

- name: Create log directory
  file: path=/var/log/morph owner=deploy group=deploy state=directory

- name: Ensure Procfile.production copied
  copy: src=../Procfile.production dest=/home/deploy/Procfile.production
  notify: Export to systemd

- name: Create sudoers ready for testing
  template: src=sudoers dest=/etc/sudoers.d/deploy.test owner=root group=root mode=0440
  notify: Test sudoers and make it live

# TODO: There are serious security concerns with doing this. This will probably be improved
# as Docker matures
- name: Add deploy to the docker group (so it has permissions to do dockery things)
  user: name=deploy groups=docker

- name: Install dependency for following command
  apt: pkg=python-mysqldb

- name: Create database
  mysql_db: name=morph

- name: Create a morph user with access to the database
  mysql_user:
    name: morph
    password: "{{ mysql_password }}"
    priv: 'morph.*:ALL'

- name: Copy over database configuration for application
  template: src=database.yml dest=/var/www/shared/config/database.yml owner=deploy group=deploy

- name: Remove newrelic configuration
  file:
    state: absent
    dest: /var/www/shared/config/newrelic.yml
  notify: restart nginx

- name: Dependency for following command
  apt: pkg=python-passlib

# We have to do it like this for Ubuntu 16.04
# See https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806
- name: Link to correct timezone
  file:
    src: /usr/share/zoneinfo/Australia/Sydney
    dest: /etc/localtime
    state: link
  notify: Update timezone

# TODO: Use special_time (or at least look at using it)
- name: Setting daily cron job for 10:00am
  cron: name="daily scraping" hour=10 minute=0 user=deploy job="cd /var/www/current && /home/deploy/.rvm/bin/rvm . do bundle exec rake app:auto_run_scrapers RAILS_ENV=production"
  when: cron_jobs

- name: Setting cron job for sending out email alerts for 11:30am
  cron: name="email alerts" hour=11 minute=30 user=deploy job="cd /var/www/current && /home/deploy/.rvm/bin/rvm . do bundle exec rake app:send_alerts RAILS_ENV=production"
  when: cron_jobs

- name: Cron job to generate xml sitemaps at 4pm
  cron: name="xml sitemaps" hour=16 user=deploy job="cd /var/www/current && /home/deploy/.rvm/bin/rvm . do bundle exec rake sitemap:refresh RAILS_ENV=production"
  when: cron_jobs

- name: Do daily reindex of elasticsearch at 6am in case things get out of sync
  cron:
    name: "elasticsearch reindex"
    hour: 6
    minute: 0
    user: deploy
    job: "cd /var/www/current && /home/deploy/.rvm/bin/rvm . do bundle exec rake searchkick:reindex:all RAILS_ENV=production"
    state: present
  when: cron_jobs

- name: Once an hour check whether to stop scraper containers that have been running too long
  cron: name="stop long-running" minute="0" user=deploy job="cd /var/www/current && /home/deploy/.rvm/bin/rvm . do bundle exec rake app:stop_long_running_scrapers RAILS_ENV=production"
  when: cron_jobs

- name: Hourly tidy up of Docker images and containers
  cron:
    name: "Docker Tidy Up"
    user: deploy
    job: "cd /var/www/current && /home/deploy/.rvm/bin/rvm . do bundle exec rake app:docker_tidy_up RAILS_ENV=production"
    special_time: hourly
  when: cron_jobs

- name: Install nodejs for asset precompiling
  apt: pkg=nodejs

- name: Install memcached
  apt: pkg=memcached

- name: Create directory for duply backup config for mysql
  file: path=/root/.duply/mysql state=directory

- name: Create directory for duply backup config for sqlite
  file: path=/root/.duply/sqlite state=directory

- name: Copy across duply backup config for mysql
  template: src=duply_mysql_conf dest=/root/.duply/mysql/conf owner=root group=root mode=0400

- name: Copy across duply backup config for sqlite
  template: src=duply_sqlite_conf dest=/root/.duply/sqlite/conf owner=root group=root mode=0400

- name: Do backups daily of mysql to S3 at 4:40AM
  cron: name="duply mysql" hour=4 minute=40 user=root job="duply mysql backup"
  when: backups

- name: Do backups daily of sqlite to S3 at 4:40AM
  cron: name="duply sqlite" hour=4 minute=40 user=root job="duply sqlite backup"
  when: backups

- name: Sync configuration
  template: src=sync.yml dest=/var/www/shared/config/sync.yml owner=deploy group=deploy

- name: Add server name to /etc/hosts
  lineinfile: dest=/etc/hosts line="127.0.0.1 {{ server_name }}" owner=root group=root mode=0644

- name: Add faye server name to /etc/hosts
  lineinfile: dest=/etc/hosts line="127.0.0.1 faye.{{ server_name }}" owner=root group=root mode=0644

- name: iptables add script
  copy: src=iptables-morph-add dest=/usr/local/sbin mode=0755

- name: iptables remove script
  copy: src=iptables-morph-remove dest=/usr/local/sbin mode=0755

- name: run iptables morph setup script at boot
  copy: src=interfaces dest=/etc/network/if-pre-up.d/iptables-morph-add mode=0755

# We're going to use monit to monitor the sidekiq worker to ensure that it doesn't
# use too much memory
- name: Install monit
  apt: pkg=monit state=present

- name: copy across monit config for sidekiq
  copy: src=monit_sidekiq.conf dest=/etc/monit/conf.d/sidekiq.conf
  notify: reload monit

# Dependencies required by GitHub markup gem. See
# https://github.com/github/markup#markups
# We're using version 0.18 of docutils because we're on python 3.5.2
- name: Install dependency for restructured text support (python 3)
  pip:
    virtualenv_python: python3
    name: docutils==0.18
    state: present

# Vigorously clean unused docker data
- name: Set up docker cleanup cron job
  copy:
    src: docker-system-prune
    dest: /etc/cron.hourly/docker-system-prune
    owner: root
    group: root
    mode: 0755
  when: cron_jobs
