# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actiontext` gem.
# Please instead update this file by running `bin/tapioca gem actiontext`.

# source://actiontext-6.1.7.10/lib/action_text.rb:8
module ActionText
  extend ::ActiveSupport::Autoload

  class << self
    # source://railties-6.1.7.10/lib/rails/engine.rb:405
    def railtie_helpers_paths; end

    # source://railties-6.1.7.10/lib/rails/engine.rb:394
    def railtie_namespace; end

    # source://railties-6.1.7.10/lib/rails/engine.rb:409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties-6.1.7.10/lib/rails/engine.rb:397
    def table_name_prefix; end

    # source://railties-6.1.7.10/lib/rails/engine.rb:401
    def use_relative_model_naming?; end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachable.rb:4
module ActionText::Attachable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attachable::ClassMethods

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:66
  def as_json(*_arg0); end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:46
  def attachable_content_type; end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:50
  def attachable_filename; end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:54
  def attachable_filesize; end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:58
  def attachable_metadata; end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:42
  def attachable_sgid; end

  # @return [Boolean]
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:62
  def previewable_attachable?; end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:74
  def to_rich_text_attributes(attributes = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:70
  def to_trix_content_attachment_partial_path; end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:22
    def from_attachable_sgid(sgid, options = T.unsafe(nil)); end

    # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:10
    def from_node(node); end

    private

    # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:29
    def attachable_from_sgid(sgid); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachable.rb:0
module ActionText::Attachable::ClassMethods
  # source://actiontext-6.1.7.10/lib/action_text/attachable.rb:37
  def from_attachable_sgid(sgid); end
end

# source://actiontext-6.1.7.10/lib/action_text/attachable.rb:7
ActionText::Attachable::LOCATOR_NAME = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text.rb:24
module ActionText::Attachables
  extend ::ActiveSupport::Autoload
end

# source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:5
class ActionText::Attachables::ContentAttachment
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
  def __callbacks; end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
  def __callbacks?; end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:823
  def _run_validate_callbacks(&block); end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:835
  def _validate_callbacks; end

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
  def _validators; end

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
  def _validators?; end

  # source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:20
  def attachable_plain_text_representation(caption); end

  # source://activemodel-6.1.7.10/lib/active_model/naming.rb:237
  def model_name(*_arg0, &_arg1); end

  # Returns the value of attribute name.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:17
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:17
  def name=(_arg0); end

  # source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:29
  def to_partial_path; end

  # source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:33
  def to_trix_content_attachment_partial_path; end

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:48
  def validation_context; end

  private

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks=(value); end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks?; end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:827
    def _validate_callbacks; end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:831
    def _validate_callbacks=(value); end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators=(value); end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators?; end

    # source://actiontext-6.1.7.10/lib/action_text/attachables/content_attachment.rb:8
    def from_node(node); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachables/missing_attachable.rb:5
module ActionText::Attachables::MissingAttachable
  extend ::ActiveModel::Naming

  # source://activemodel-6.1.7.10/lib/active_model/naming.rb:237
  def model_name(*_arg0, &_arg1); end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/attachables/missing_attachable.rb:8
    def to_partial_path; end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:5
class ActionText::Attachables::RemoteImage
  extend ::ActiveModel::Naming

  # @return [RemoteImage] a new instance of RemoteImage
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:30
  def initialize(attributes = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:37
  def attachable_plain_text_representation(caption); end

  # Returns the value of attribute content_type.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:28
  def content_type; end

  # Returns the value of attribute height.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:28
  def height; end

  # source://activemodel-6.1.7.10/lib/active_model/naming.rb:237
  def model_name(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:41
  def to_partial_path; end

  # Returns the value of attribute url.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:28
  def url; end

  # Returns the value of attribute width.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:28
  def width; end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:9
    def from_node(node); end

    private

    # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:20
    def attributes_from_node(node); end

    # @return [Boolean]
    #
    # source://actiontext-6.1.7.10/lib/action_text/attachables/remote_image.rb:16
    def content_type_is_image?(content_type); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachment.rb:6
class ActionText::Attachment
  include ::ActionText::Attachments::Caching
  include ::ActionText::Attachments::Minification
  include ::ActionText::Attachments::TrixConversion
  extend ::ActionText::Attachments::Minification::ClassMethods
  extend ::ActionText::Attachments::TrixConversion::ClassMethods

  # @return [Attachment] a new instance of Attachment
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:55
  def initialize(node, attachable); end

  # Returns the value of attribute attachable.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:50
  def attachable; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:60
  def caption; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:64
  def full_attributes; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:88
  def inspect; end

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:308
  def method_missing(method, *args, &block); end

  # Returns the value of attribute node.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:50
  def node; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:80
  def to_html; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:52
  def to_param(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:72
  def to_plain_text; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:84
  def to_s; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:68
  def with_full_attributes; end

  private

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:97
  def attachable_attributes; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:93
  def node_attributes; end

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:101
  def sgid_attributes; end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:14
    def fragment_by_canonicalizing_attachments(content); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:26
    def from_attachable(attachable, attributes = T.unsafe(nil)); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:22
    def from_attachables(attachables); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:32
    def from_attributes(attributes, attachable = T.unsafe(nil)); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:18
    def from_node(node, attachable = T.unsafe(nil)); end

    private

    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:39
    def node_from_attributes(attributes); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment.rb:45
    def process_attributes(attributes); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachment.rb:11
ActionText::Attachment::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://actiontext-6.1.7.10/lib/action_text/attachment.rb:10
ActionText::Attachment::SELECTOR = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text/attachment.rb:9
ActionText::Attachment::TAG_NAME = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:4
class ActionText::AttachmentGallery
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods

  # @return [AttachmentGallery] a new instance of AttachmentGallery
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:41
  def initialize(node); end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
  def __callbacks; end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
  def __callbacks?; end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:823
  def _run_validate_callbacks(&block); end

  # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:835
  def _validate_callbacks; end

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
  def _validators; end

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
  def _validators?; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:45
  def attachments; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:55
  def inspect; end

  # source://activemodel-6.1.7.10/lib/active_model/naming.rb:237
  def model_name(*_arg0, &_arg1); end

  # Returns the value of attribute node.
  #
  # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:39
  def node; end

  # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:51
  def size; end

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:48
  def validation_context; end

  private

  # source://activemodel-6.1.7.10/lib/active_model/validations.rb:48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks=(value); end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks?; end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:827
    def _validate_callbacks; end

    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:831
    def _validate_callbacks=(value); end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators=(value); end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators?; end

    # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:22
    def find_attachment_gallery_nodes(content); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:8
    def fragment_by_canonicalizing_attachment_galleries(content); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:14
    def fragment_by_replacing_attachment_gallery_nodes(content); end

    # source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:34
    def from_node(node); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:60
ActionText::AttachmentGallery::ATTACHMENT_SELECTOR = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:61
ActionText::AttachmentGallery::SELECTOR = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text/attachment_gallery.rb:59
ActionText::AttachmentGallery::TAG_NAME = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text.rb:32
module ActionText::Attachments
  extend ::ActiveSupport::Autoload
end

# source://actiontext-6.1.7.10/lib/action_text/attachments/caching.rb:5
module ActionText::Attachments::Caching
  # source://actiontext-6.1.7.10/lib/action_text/attachments/caching.rb:6
  def cache_key(*args); end

  private

  # source://actiontext-6.1.7.10/lib/action_text/attachments/caching.rb:11
  def cache_digest; end
end

# source://actiontext-6.1.7.10/lib/action_text/attachments/minification.rb:5
module ActionText::Attachments::Minification
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attachments::Minification::ClassMethods
end

# source://actiontext-6.1.7.10/lib/action_text/attachments/minification.rb:0
module ActionText::Attachments::Minification::ClassMethods
  # source://actiontext-6.1.7.10/lib/action_text/attachments/minification.rb:9
  def fragment_by_minifying_attachments(content); end
end

# source://actiontext-6.1.7.10/lib/action_text/attachments/trix_conversion.rb:7
module ActionText::Attachments::TrixConversion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attachments::TrixConversion::ClassMethods

  # source://actiontext-6.1.7.10/lib/action_text/attachments/trix_conversion.rb:22
  def to_trix_attachment(content = T.unsafe(nil)); end

  private

  # source://actiontext-6.1.7.10/lib/action_text/attachments/trix_conversion.rb:29
  def trix_attachment_content; end
end

# source://actiontext-6.1.7.10/lib/action_text/attachments/trix_conversion.rb:0
module ActionText::Attachments::TrixConversion::ClassMethods
  # source://actiontext-6.1.7.10/lib/action_text/attachments/trix_conversion.rb:11
  def fragment_by_converting_trix_attachments(content); end

  # source://actiontext-6.1.7.10/lib/action_text/attachments/trix_conversion.rb:17
  def from_trix_attachment(trix_attachment); end
end

# source://actiontext-6.1.7.10/lib/action_text/attribute.rb:4
module ActionText::Attribute
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attribute::ClassMethods
end

# source://actiontext-6.1.7.10/lib/action_text/attribute.rb:0
module ActionText::Attribute::ClassMethods
  # source://actiontext-6.1.7.10/lib/action_text/attribute.rb:27
  def has_rich_text(name); end
end

# source://actiontext-6.1.7.10/lib/action_text/content.rb:4
class ActionText::Content
  include ::ActionText::Serialization
  include ::ActionText::Rendering
  extend ::ActionText::Serialization::ClassMethods
  extend ::ActionText::Rendering::ClassMethods

  # @return [Content] a new instance of Content
  #
  # source://actiontext-6.1.7.10/lib/action_text/content.rb:19
  def initialize(content = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:102
  def ==(other); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:55
  def append_attachables(attachables); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:94
  def as_json(*_arg0); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:49
  def attachables; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:39
  def attachment_galleries; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:33
  def attachments; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:9
  def blank?(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:9
  def empty?(*_arg0, &_arg1); end

  # Returns the value of attribute fragment.
  #
  # source://actiontext-6.1.7.10/lib/action_text/content.rb:7
  def fragment; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:45
  def gallery_attachments; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:9
  def html_safe(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:98
  def inspect; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:29
  def links; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:9
  def present?(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/lib/action_text/rendering.rb:13
  def render(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:67
  def render_attachment_galleries(&block); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:60
  def render_attachments(**options, &block); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:82
  def to_html; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:74
  def to_plain_text; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:86
  def to_rendered_html_with_layout; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:90
  def to_s; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:78
  def to_trix_html; end

  private

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:117
  def attachment_for_node(node, with_full_attributes: T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:122
  def attachment_gallery_for_node(node); end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:113
  def attachment_gallery_nodes; end

  # source://actiontext-6.1.7.10/lib/action_text/content.rb:109
  def attachment_nodes; end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/rendering.rb:11
    def default_renderer; end

    # source://actiontext-6.1.7.10/lib/action_text/rendering.rb:11
    def default_renderer=(val); end

    # source://actiontext-6.1.7.10/lib/action_text/content.rb:12
    def fragment_by_canonicalizing_content(content); end

    # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb:43
    def renderer; end

    # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb:86
    def renderer=(obj); end
  end
end

# source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:6
module ActionText::ContentHelper
  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:9
  def allowed_attributes; end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:9
  def allowed_attributes=(val); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:8
  def allowed_tags; end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:8
  def allowed_tags=(val); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:21
  def render_action_text_attachments(content); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:12
  def render_action_text_content(content); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:17
  def sanitize_action_text_content(content); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:7
  def sanitizer; end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:7
  def sanitizer=(val); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:10
  def scrubber; end

  # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:10
  def scrubber=(val); end

  class << self
    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:9
    def allowed_attributes; end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:9
    def allowed_attributes=(val); end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:8
    def allowed_tags; end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:8
    def allowed_tags=(val); end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:7
    def sanitizer; end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:7
    def sanitizer=(val); end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:10
    def scrubber; end

    # source://actiontext-6.1.7.10/app/helpers/action_text/content_helper.rb:10
    def scrubber=(val); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/engine.rb:11
class ActionText::Engine < ::Rails::Engine; end

# source://actiontext-6.1.7.10/lib/action_text/fixture_set.rb:4
class ActionText::FixtureSet
  class << self
    # source://actiontext-6.1.7.10/lib/action_text/fixture_set.rb:5
    def attachment(fixture_set_name, label, column_type: T.unsafe(nil)); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/fragment.rb:4
class ActionText::Fragment
  # @return [Fragment] a new instance of Fragment
  #
  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:24
  def initialize(source); end

  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:28
  def find_all(selector); end

  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:37
  def replace(selector); end

  # Returns the value of attribute source.
  #
  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:22
  def source; end

  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:49
  def to_html; end

  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:45
  def to_plain_text; end

  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:53
  def to_s; end

  # @yield [source = self.source.clone]
  #
  # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:32
  def update; end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:17
    def from_html(html); end

    # source://actiontext-6.1.7.10/lib/action_text/fragment.rb:6
    def wrap(fragment_or_html); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/html_conversion.rb:4
module ActionText::HtmlConversion
  extend ::ActionText::HtmlConversion

  # source://actiontext-6.1.7.10/lib/action_text/html_conversion.rb:15
  def create_element(tag_name, attributes = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/html_conversion.rb:11
  def fragment_for_html(html); end

  # source://actiontext-6.1.7.10/lib/action_text/html_conversion.rb:7
  def node_to_html(node); end

  private

  # source://actiontext-6.1.7.10/lib/action_text/html_conversion.rb:20
  def document; end
end

# source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:4
module ActionText::PlainTextConversion
  extend ::ActionText::PlainTextConversion

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:7
  def node_to_plain_text(node); end

  private

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:76
  def bullet_for_li_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:84
  def list_node_name_for_li_node(node); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:32
  def plain_text_for_block(node, index = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:56
  def plain_text_for_blockquote_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:40
  def plain_text_for_br_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:48
  def plain_text_for_div_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:52
  def plain_text_for_figcaption_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:32
  def plain_text_for_h1_node(node, index = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:66
  def plain_text_for_li_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:12
  def plain_text_for_node(node, index = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:20
  def plain_text_for_node_children(node); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:32
  def plain_text_for_ol_node(node, index = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:32
  def plain_text_for_p_node(node, index = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:44
  def plain_text_for_text_node(node, index); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:32
  def plain_text_for_ul_node(node, index = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:28
  def plain_text_method_for_node(node); end

  # source://actiontext-6.1.7.10/lib/action_text/plain_text_conversion.rb:72
  def remove_trailing_newlines(text); end
end

# source://actiontext-6.1.7.10/app/models/action_text/record.rb:4
class ActionText::Record < ::ActiveRecord::Base
  include ::ActionText::Record::GeneratedAttributeMethods
  include ::ActionText::Record::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  class << self
    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-6.1.7.10/lib/active_record/enum.rb:109
    def defined_enums; end

    # source://kaminari-activerecord-1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb:15
    def page(num = T.unsafe(nil)); end
  end
end

# source://actiontext-6.1.7.10/app/models/action_text/record.rb:0
module ActionText::Record::GeneratedAssociationMethods; end

# source://actiontext-6.1.7.10/app/models/action_text/record.rb:0
module ActionText::Record::GeneratedAttributeMethods; end

# source://actiontext-6.1.7.10/lib/action_text/rendering.rb:7
module ActionText::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Rendering::ClassMethods
end

# source://actiontext-6.1.7.10/lib/action_text/rendering.rb:0
module ActionText::Rendering::ClassMethods
  # source://actiontext-6.1.7.10/lib/action_text/rendering.rb:25
  def render(*args, &block); end

  # source://actiontext-6.1.7.10/lib/action_text/rendering.rb:17
  def with_renderer(renderer); end
end

# source://actiontext-6.1.7.10/app/models/action_text/rich_text.rb:8
class ActionText::RichText < ::ActionText::Record
  include ::ActionText::RichText::GeneratedAttributeMethods
  include ::ActionText::RichText::GeneratedAssociationMethods

  # source://activerecord-6.1.7.10/lib/active_record/autosave_association.rb:175
  def autosave_associated_records_for_record(*args); end

  # source://actiontext-6.1.7.10/app/models/action_text/rich_text.rb:12
  def nil?(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/app/models/action_text/rich_text.rb:12
  def to_s(*_arg0, &_arg1); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://activerecord-6.1.7.10/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-6.1.7.10/lib/active_record/attributes.rb:11
    def attributes_to_define_after_schema_loads; end

    # source://activerecord-6.1.7.10/lib/active_record/enum.rb:109
    def defined_enums; end
  end
end

# source://actiontext-6.1.7.10/app/models/action_text/rich_text.rb:0
module ActionText::RichText::GeneratedAssociationMethods
  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:102
  def record; end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:110
  def record=(value); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:19
  def reload_record; end
end

# source://actiontext-6.1.7.10/app/models/action_text/rich_text.rb:0
module ActionText::RichText::GeneratedAttributeMethods; end

# source://actiontext-6.1.7.10/lib/action_text/serialization.rb:4
module ActionText::Serialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Serialization::ClassMethods

  # source://actiontext-6.1.7.10/lib/action_text/serialization.rb:32
  def _dump(*_arg0); end
end

# source://actiontext-6.1.7.10/lib/action_text/serialization.rb:0
module ActionText::Serialization::ClassMethods
  # source://actiontext-6.1.7.10/lib/action_text/serialization.rb:8
  def _load(content); end

  # source://actiontext-6.1.7.10/lib/action_text/serialization.rb:12
  def dump(content); end

  # source://actiontext-6.1.7.10/lib/action_text/serialization.rb:8
  def load(content); end
end

# source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:7
module ActionText::TagHelper
  # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:21
  def rich_text_area_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:8
    def id; end

    # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:8
    def id=(val); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:4
class ActionText::TrixAttachment
  # @return [TrixAttachment] a new instance of TrixAttachment
  #
  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:51
  def initialize(node); end

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:55
  def attributes; end

  # Returns the value of attribute node.
  #
  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:49
  def node; end

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:59
  def to_html; end

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:63
  def to_s; end

  private

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:68
  def attachment_attributes; end

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:72
  def composed_attributes; end

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:80
  def read_json_attribute(name); end

  # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:76
  def read_json_object_attribute(name); end

  class << self
    # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:19
    def from_attributes(attributes); end

    private

    # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:33
    def process_attributes(attributes); end

    # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:37
    def transform_attribute_keys(attributes); end

    # source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:41
    def typecast_attribute_values(attributes); end
  end
end

# source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:9
ActionText::TrixAttachment::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:10
ActionText::TrixAttachment::ATTRIBUTE_TYPES = T.let(T.unsafe(nil), Hash)

# source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:8
ActionText::TrixAttachment::COMPOSED_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:6
ActionText::TrixAttachment::SELECTOR = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/lib/action_text/trix_attachment.rb:5
ActionText::TrixAttachment::TAG_NAME = T.let(T.unsafe(nil), String)

# source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:39
module ActionView::Helpers
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  class << self
    # source://actionview-6.1.7.10/lib/action_view/helpers.rb:34
    def eager_load!; end
  end
end

# source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:82
class ActionView::Helpers::FormBuilder
  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1668
  def initialize(object_name, object, template, options); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2500
  def button(value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2335
  def check_box(method, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_options_helper.rb:870
  def collection_check_boxes(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_options_helper.rb:882
  def collection_radio_buttons(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_options_helper.rb:834
  def collection_select(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def color_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def date_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/date_helper.rb:1171
  def date_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def datetime_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def datetime_local_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/date_helper.rb:1195
  def datetime_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def email_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2511
  def emitted_hidden_id?; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1633
  def field_helpers; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1633
  def field_helpers=(_arg0); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1633
  def field_helpers?; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2199
  def fields(scope = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2162
  def fields_for(record_name, record_object = T.unsafe(nil), fields_options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2417
  def file_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_options_helper.rb:846
  def grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2379
  def hidden_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1645
  def index; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2274
  def label(method, text = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def month_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1645
  def multipart; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1648
  def multipart=(multipart); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1645
  def multipart?; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def number_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1643
  def object; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1643
  def object=(_arg0); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1643
  def object_name; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1643
  def object_name=(_arg0); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1643
  def options; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1643
  def options=(_arg0); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def password_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def phone_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2357
  def radio_button(method, tag_value, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def range_field(method, options = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:83
  def rich_text_area(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def search_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_options_helper.rb:822
  def select(method, choices = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2449
  def submit(value = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def telephone_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def text_area(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def text_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def time_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/date_helper.rb:1183
  def time_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_options_helper.rb:858
  def time_zone_select(method, priority_zones = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1664
  def to_model; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1660
  def to_partial_path; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def url_field(method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1911
  def week_field(method, options = T.unsafe(nil)); end

  private

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2594
  def convert_to_legacy_options(options); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2576
  def fields_for_nested_model(name, object, fields_options, block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2549
  def fields_for_with_nested_attributes(association_name, association, options, block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2545
  def nested_attributes_association?(association_name); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2589
  def nested_child_index(name); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2516
  def objectify_options(options); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:2522
  def submit_default_value; end

  class << self
    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1656
    def _to_partial_path; end

    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1633
    def field_helpers; end

    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1633
    def field_helpers=(value); end

    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1633
    def field_helpers?; end
  end
end

# source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:57
module ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1305
  def check_box(object_name, method, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1335
  def color_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1399
  def date_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1457
  def datetime_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1457
  def datetime_local_field(object_name, method, options = T.unsafe(nil)); end

  def default_form_builder; end
  def default_form_builder=(_arg0); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1511
  def email_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1052
  def fields(scope = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1002
  def fields_for(record_name, record_object = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1217
  def file_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:428
  def form_for(record, options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:737
  def form_with(model: T.unsafe(nil), scope: T.unsafe(nil), url: T.unsafe(nil), format: T.unsafe(nil), **options, &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:479
  def form_with_generates_ids; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:479
  def form_with_generates_ids=(val); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:477
  def form_with_generates_remote_forms; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:477
  def form_with_generates_remote_forms=(val); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1185
  def hidden_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1122
  def label(object_name, method, content_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1476
  def month_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1519
  def number_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1167
  def password_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1367
  def phone_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1327
  def radio_button(object_name, method, tag_value, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1527
  def range_field(object_name, method, options = T.unsafe(nil)); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:77
  def rich_text_area(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1358
  def search_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1367
  def telephone_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1245
  def text_area(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1146
  def text_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1428
  def time_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1502
  def url_field(object_name, method, options = T.unsafe(nil)); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1493
  def week_field(object_name, method, options = T.unsafe(nil)); end

  private

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:457
  def apply_form_for_options!(record, object, options); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1575
  def default_form_builder_class; end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1532
  def html_options_for_form_with(url_for_options = T.unsafe(nil), model = T.unsafe(nil), html: T.unsafe(nil), local: T.unsafe(nil), skip_enforcing_utf8: T.unsafe(nil), **options); end

  # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:1561
  def instantiate_builder(record_name, record_object, options); end

  class << self
    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:479
    def form_with_generates_ids; end

    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:479
    def form_with_generates_ids=(val); end

    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:477
    def form_with_generates_remote_forms; end

    # source://actionview-6.1.7.10/lib/action_view/helpers/form_helper.rb:477
    def form_with_generates_remote_forms=(val); end
  end
end

# source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:40
class ActionView::Helpers::Tags::ActionText < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::Placeholderable

  # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:43
  def dom_id(*_arg0, &_arg1); end

  # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:52
  def editable_value; end

  # source://actiontext-6.1.7.10/app/helpers/action_text/tag_helper.rb:45
  def render; end
end
