# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch-api` gem.
# Please instead update this file by running `bin/tapioca gem elasticsearch-api`.

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/version.rb:18
module Elasticsearch; end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/version.rb:19
module Elasticsearch::API
  class << self
    # Auto-include all namespaces in the receiver
    #
    # source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:63
    def included(base); end

    # The serializer class
    #
    # source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:82
    def serializer; end

    # Access the module settings
    #
    # source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:88
    def settings; end
  end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/params_registry.rb:20
module Elasticsearch::API::Actions
  # Allows to perform multiple index/update/delete operations in a single request.
  #
  # or the conveniency "combined" format can be passed, refer to Elasticsearch::API::Utils.__bulkify documentation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-bulk.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/bulk.rb:40
  def bulk(arguments = T.unsafe(nil)); end

  # Explicitly clears the search context for a scroll.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/clear-scroll-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/clear_scroll.rb:34
  def clear_scroll(arguments = T.unsafe(nil)); end

  # Close a point in time
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/point-in-time-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/close_point_in_time.rb:28
  def close_point_in_time(arguments = T.unsafe(nil)); end

  # Returns number of documents matching a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-count.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/count.rb:49
  def count(arguments = T.unsafe(nil)); end

  # Creates a new document in the index.
  #
  # Returns a 409 response when a document with a same ID already exists in the index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-index_.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/create.rb:45
  def create(arguments = T.unsafe(nil)); end

  # Removes a document from the index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-delete.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/delete.rb:43
  def delete(arguments = T.unsafe(nil)); end

  # Deletes documents matching the provided query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-delete-by-query.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/delete_by_query.rb:65
  def delete_by_query(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Delete By Query operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-delete-by-query.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/delete_by_query_rethrottle.rb:29
  def delete_by_query_rethrottle(arguments = T.unsafe(nil)); end

  # Deletes a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-scripting.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/delete_script.rb:30
  def delete_script(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/exists.rb:45
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/exists.rb:45
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/exists_source.rb:44
  def exists_source(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/exists_source.rb:44
  def exists_source?(arguments = T.unsafe(nil)); end

  # Returns information about why a specific matches (or doesn't match) a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-explain.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/explain.rb:48
  def explain(arguments = T.unsafe(nil)); end

  # Returns the information about the capabilities of fields among multiple indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-field-caps.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/field_caps.rb:34
  def field_caps(arguments = T.unsafe(nil)); end

  # Returns a document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/get.rb:45
  def get(arguments = T.unsafe(nil)); end

  # Returns a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-scripting.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/get_script.rb:29
  def get_script(arguments = T.unsafe(nil)); end

  # Returns all script contexts.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/painless/7.17/painless-contexts.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/get_script_context.rb:27
  def get_script_context(arguments = T.unsafe(nil)); end

  # Returns available script types, languages and contexts
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-scripting.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/get_script_languages.rb:27
  def get_script_languages(arguments = T.unsafe(nil)); end

  # Returns the source of a document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/get_source.rb:44
  def get_source(arguments = T.unsafe(nil)); end

  # Creates or updates a document in an index.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-index_.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/index.rb:47
  def index(arguments = T.unsafe(nil)); end

  # Returns basic information about the cluster.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/info.rb:27
  def info(arguments = T.unsafe(nil)); end

  # Allows to get multiple documents in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-multi-get.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/mget.rb:43
  def mget(arguments = T.unsafe(nil)); end

  # Allows to execute several search operations in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-multi-search.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/msearch.rb:42
  def msearch(arguments = T.unsafe(nil)); end

  # Allows to execute several search template operations in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-multi-search.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/msearch_template.rb:40
  def msearch_template(arguments = T.unsafe(nil)); end

  # Returns multiple termvectors in one request.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-multi-termvectors.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/mtermvectors.rb:47
  def mtermvectors(arguments = T.unsafe(nil)); end

  # Open a point in time that can be used in subsequent searches
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/point-in-time-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/open_point_in_time.rb:33
  def open_point_in_time(arguments = T.unsafe(nil)); end

  # Returns whether the cluster is running.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ping.rb:27
  def ping(arguments = T.unsafe(nil)); end

  # Creates or updates a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-scripting.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/put_script.rb:32
  def put_script(arguments = T.unsafe(nil)); end

  # Allows to evaluate the quality of ranked search results over a set of typical search queries
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-rank-eval.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/rank_eval.rb:33
  def rank_eval(arguments = T.unsafe(nil)); end

  # Allows to copy documents from one index to another, optionally filtering the source
  # documents by a query, changing the destination index settings, or fetching the
  # documents from a remote cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-reindex.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/reindex.rb:38
  def reindex(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Reindex operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-reindex.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/reindex_rethrottle.rb:29
  def reindex_rethrottle(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/render-search-template-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/render_search_template.rb:29
  def render_search_template(arguments = T.unsafe(nil)); end

  # Allows an arbitrary script to be executed and a result to be returned
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/painless/7.17/painless-execute-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/scripts_painless_execute.rb:32
  def scripts_painless_execute(arguments = T.unsafe(nil)); end

  # Allows to retrieve a large numbers of results from a single search request.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-request-body.html#request-body-search-scroll
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/scroll.rb:36
  def scroll(arguments = T.unsafe(nil)); end

  # Returns results matching a query.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-search.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/search.rb:78
  def search(arguments = T.unsafe(nil)); end

  # Searches a vector tile for geospatial values. Returns results as a binary Mapbox vector tile.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-vector-tile-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/search_mvt.rb:43
  def search_mvt(arguments = T.unsafe(nil)); end

  # Returns information about the indices and shards that a search request would be executed against.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-shards.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/search_shards.rb:34
  def search_shards(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-template.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/search_template.rb:48
  def search_template(arguments = T.unsafe(nil)); end

  # Deprecated: Use the plural version, {#termvectors}
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/termvectors.rb:85
  def termvector(arguments = T.unsafe(nil)); end

  # Returns information and statistics about terms in the fields of a particular document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-termvectors.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/termvectors.rb:47
  def termvectors(arguments = T.unsafe(nil)); end

  # Updates a document with a script or partial document.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/update.rb:48
  def update(arguments = T.unsafe(nil)); end

  # Performs an update on every document in the index without changing the source,
  # for example to pick up a mapping change.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update-by-query.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/update_by_query.rb:68
  def update_by_query(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Update By Query operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/docs-update-by-query.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/update_by_query_rethrottle.rb:29
  def update_by_query_rethrottle(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/params_registry.rb:21
module Elasticsearch::API::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/params_registry.rb:52
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/params_registry.rb:38
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/params_registry.rb:27
Elasticsearch::API::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:34
Elasticsearch::API::COMMON_PARAMS = T.let(T.unsafe(nil), Array)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:43
Elasticsearch::API::COMMON_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/params_registry.rb:20
module Elasticsearch::API::Cat
  # Proxy method for {CatClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/cat.rb:31
  def cat; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/params_registry.rb:21
module Elasticsearch::API::Cat::Actions
  # Shows information about currently configured aliases to indices including filter and routing infos.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-alias.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/aliases.rb:36
  def aliases(arguments = T.unsafe(nil)); end

  # Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-allocation.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/allocation.rb:37
  def allocation(arguments = T.unsafe(nil)); end

  # Provides quick access to the document count of the entire cluster, or individual indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-count.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/count.rb:34
  def count(arguments = T.unsafe(nil)); end

  # Shows how much heap memory is currently being used by fielddata on every data node in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-fielddata.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/fielddata.rb:35
  def fielddata(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster health.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-health.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/health.rb:35
  def health(arguments = T.unsafe(nil)); end

  # Returns help for the Cat APIs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/help.rb:30
  def help(arguments = T.unsafe(nil)); end

  # Returns information about indices: number of primaries and replicas, document counts, disk size, ...
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-indices.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/indices.rb:42
  def indices(arguments = T.unsafe(nil)); end

  # Returns information about the master node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-master.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/master.rb:35
  def master(arguments = T.unsafe(nil)); end

  # Returns information about custom node attributes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-nodeattrs.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/nodeattrs.rb:35
  def nodeattrs(arguments = T.unsafe(nil)); end

  # Returns basic statistics about performance of cluster nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-nodes.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/nodes.rb:39
  def nodes(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster pending tasks.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-pending-tasks.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/pending_tasks.rb:36
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Returns information about installed plugins across nodes node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-plugins.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/plugins.rb:36
  def plugins(arguments = T.unsafe(nil)); end

  # Returns information about index shard recoveries, both on-going completed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-recovery.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/recovery.rb:38
  def recovery(arguments = T.unsafe(nil)); end

  # Returns information about snapshot repositories registered in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-repositories.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/repositories.rb:35
  def repositories(arguments = T.unsafe(nil)); end

  # Provides low-level information about the segments in the shards of an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-segments.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/segments.rb:35
  def segments(arguments = T.unsafe(nil)); end

  # Provides a detailed view of shard allocation on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-shards.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/shards.rb:38
  def shards(arguments = T.unsafe(nil)); end

  # Returns all snapshots in a specific repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/snapshots.rb:37
  def snapshots(arguments = T.unsafe(nil)); end

  # Returns information about the tasks currently executing on one or more nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/tasks.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/tasks.rb:38
  def tasks(arguments = T.unsafe(nil)); end

  # Returns information about existing templates.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/templates.rb:36
  def templates(arguments = T.unsafe(nil)); end

  # Returns cluster-wide thread pool statistics per node.
  # By default the active, queue and rejected statistics are returned for all thread pools.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cat-thread-pool.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/thread_pool.rb:38
  def thread_pool(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/params_registry.rb:22
module Elasticsearch::API::Cat::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Cat::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cat/params_registry.rb:28
Elasticsearch::API::Cat::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cat" namespace (includes the {Cat::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/cat.rb:25
class Elasticsearch::API::Cat::CatClient
  include ::Elasticsearch::API::Cat::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/params_registry.rb:20
module Elasticsearch::API::Cluster
  # Proxy method for {ClusterClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/cluster.rb:31
  def cluster; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/params_registry.rb:21
module Elasticsearch::API::Cluster::Actions
  # Provides explanations for shard allocations in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-allocation-explain.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/allocation_explain.rb:31
  def allocation_explain(arguments = T.unsafe(nil)); end

  # Deletes a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-component-template.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/delete_component_template.rb:31
  def delete_component_template(arguments = T.unsafe(nil)); end

  # Clears cluster voting config exclusions.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/voting-config-exclusions.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/delete_voting_config_exclusions.rb:29
  def delete_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-component-template.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/exists_component_template.rb:31
  def exists_component_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-component-template.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/exists_component_template.rb:31
  def exists_component_template?(arguments = T.unsafe(nil)); end

  # Returns one or more component templates
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-component-template.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/get_component_template.rb:31
  def get_component_template(arguments = T.unsafe(nil)); end

  # Returns cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-get-settings.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/get_settings.rb:32
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns basic information about the health of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-health.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/health.rb:40
  def health(arguments = T.unsafe(nil)); end

  # Returns a list of any cluster-level changes (e.g. create index, update mapping,
  # allocate or fail shard) which have not yet been executed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-pending.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/pending_tasks.rb:31
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Updates the cluster voting config exclusions by node ids or node names.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/voting-config-exclusions.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/post_voting_config_exclusions.rb:31
  def post_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Creates or updates a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-component-template.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/put_component_template.rb:33
  def put_component_template(arguments = T.unsafe(nil)); end

  # Updates the cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-update-settings.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/put_settings.rb:32
  def put_settings(arguments = T.unsafe(nil)); end

  # Returns the information about configured remote clusters.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-remote-info.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/remote_info.rb:28
  def remote_info(arguments = T.unsafe(nil)); end

  # Allows to manually change the allocation of individual shards in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-reroute.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/reroute.rb:35
  def reroute(arguments = T.unsafe(nil)); end

  # Returns a comprehensive information about the state of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-state.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/state.rb:38
  def state(arguments = T.unsafe(nil)); end

  # Returns high-level overview of cluster statistics.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-stats.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/stats.rb:31
  def stats(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/params_registry.rb:22
module Elasticsearch::API::Cluster::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Cluster::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/cluster/params_registry.rb:28
Elasticsearch::API::Cluster::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cluster" namespace (includes the {Cluster::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/cluster.rb:25
class Elasticsearch::API::Cluster::ClusterClient
  include ::Elasticsearch::API::Cluster::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:20
module Elasticsearch::API::Common; end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:21
module Elasticsearch::API::Common::Actions; end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:23
module Elasticsearch::API::Common::Client
  # Delegates the `perform_request` method to the wrapped client
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:37
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end
end

# Base client wrapper
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:27
module Elasticsearch::API::Common::Client::Base
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:30
  def initialize(client); end

  # Returns the value of attribute client.
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/common.rb:28
  def client; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:59
Elasticsearch::API::DEFAULT_DOC = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:32
Elasticsearch::API::DEFAULT_SERIALIZER = MultiJson

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/params_registry.rb:20
module Elasticsearch::API::DanglingIndices
  # Proxy method for {DanglingIndicesClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/dangling_indices.rb:30
  def dangling_indices; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/params_registry.rb:21
module Elasticsearch::API::DanglingIndices::Actions
  # Deletes the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-gateway-dangling-indices.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/delete_dangling_index.rb:32
  def delete_dangling_index(arguments = T.unsafe(nil)); end

  # Imports the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-gateway-dangling-indices.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/import_dangling_index.rb:32
  def import_dangling_index(arguments = T.unsafe(nil)); end

  # Returns all dangling indices.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-gateway-dangling-indices.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/list_dangling_indices.rb:28
  def list_dangling_indices(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/params_registry.rb:22
module Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry
  extend ::Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/dangling_indices/params_registry.rb:28
Elasticsearch::API::DanglingIndices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "dangling_indices" namespace (includes the {DanglingIndices::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/dangling_indices.rb:24
class Elasticsearch::API::DanglingIndices::DanglingIndicesClient
  include ::Elasticsearch::API::DanglingIndices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/params_registry.rb:20
module Elasticsearch::API::Features
  # Proxy method for {FeaturesClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/features.rb:31
  def features; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/params_registry.rb:21
module Elasticsearch::API::Features::Actions
  # Gets a list of features which can be included in snapshots using the feature_states field when creating a snapshot
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/get-features-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/get_features.rb:29
  def get_features(arguments = T.unsafe(nil)); end

  # Resets the internal state of features, usually by deleting system indices
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/reset_features.rb:32
  def reset_features(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/params_registry.rb:22
module Elasticsearch::API::Features::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Features::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/features/params_registry.rb:28
Elasticsearch::API::Features::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "features" namespace (includes the {Features::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/features.rb:25
class Elasticsearch::API::Features::FeaturesClient
  include ::Elasticsearch::API::Features::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:56
Elasticsearch::API::HTTP_DELETE = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:52
Elasticsearch::API::HTTP_GET = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:53
Elasticsearch::API::HTTP_HEAD = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:54
Elasticsearch::API::HTTP_POST = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:55
Elasticsearch::API::HTTP_PUT = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/params_registry.rb:20
module Elasticsearch::API::Indices
  # Proxy method for {IndicesClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/indices.rb:31
  def indices; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/params_registry.rb:21
module Elasticsearch::API::Indices::Actions
  # Adds a block to an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index-modules-blocks.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/add_block.rb:35
  def add_block(arguments = T.unsafe(nil)); end

  # Performs the analysis process on a text and return the tokens breakdown of the text.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-analyze.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/analyze.rb:30
  def analyze(arguments = T.unsafe(nil)); end

  # Clears all or specific caches for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-clearcache.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/clear_cache.rb:36
  def clear_cache(arguments = T.unsafe(nil)); end

  # Clones an index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-clone-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/clone.rb:34
  def clone(arguments = T.unsafe(nil)); end

  # Closes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-open-close.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/close.rb:35
  def close(arguments = T.unsafe(nil)); end

  # Creates an index with optional settings and mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-create-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/create.rb:34
  def create(arguments = T.unsafe(nil)); end

  # Deletes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-delete-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/delete.rb:34
  def delete(arguments = T.unsafe(nil)); end

  # Deletes an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-aliases.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/delete_alias.rb:32
  def delete_alias(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/delete_index_template.rb:31
  def delete_index_template(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/delete_template.rb:31
  def delete_template(arguments = T.unsafe(nil)); end

  # Analyzes the disk usage of each field of an index or data stream
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-disk-usage.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/disk_usage.rb:38
  def disk_usage(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-exists.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists.rb:35
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-exists.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists.rb:35
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-aliases.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_alias.rb:34
  def exists_alias(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-aliases.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_alias.rb:34
  def exists_alias?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_index_template.rb:32
  def exists_index_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_index_template.rb:32
  def exists_index_template?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_template.rb:32
  def exists_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_template.rb:32
  def exists_template?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular document type exists. (DEPRECATED)
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-types-exists.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_type.rb:34
  def exists_type(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular document type exists. (DEPRECATED)
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-types-exists.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/exists_type.rb:34
  def exists_type?(arguments = T.unsafe(nil)); end

  # Returns the field usage stats for each field of an index
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/field-usage-stats.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/field_usage_stats.rb:37
  def field_usage_stats(arguments = T.unsafe(nil)); end

  # Performs the flush operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-flush.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/flush.rb:34
  def flush(arguments = T.unsafe(nil)); end

  # Performs a synced flush operation on one or more indices. Synced flush is deprecated and will be removed in 8.0. Use flush instead
  #
  # *Deprecation notice*:
  # Synced flush is deprecated and will be removed in 8.0. Use flush instead.
  # Deprecated since version 7.6.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-synced-flush-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/flush_synced.rb:37
  def flush_synced(arguments = T.unsafe(nil)); end

  # Performs the force merge operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-forcemerge.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/forcemerge.rb:35
  def forcemerge(arguments = T.unsafe(nil)); end

  # Returns information about one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-get-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get.rb:37
  def get(arguments = T.unsafe(nil)); end

  # Returns an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-aliases.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_alias.rb:34
  def get_alias(arguments = T.unsafe(nil)); end

  # Returns mapping for one or more fields.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-get-field-mapping.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_field_mapping.rb:42
  def get_field_mapping(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_index_template.rb:32
  def get_index_template(arguments = T.unsafe(nil)); end

  # Returns mappings for one or more indices.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-get-mapping.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_mapping.rb:41
  def get_mapping(arguments = T.unsafe(nil)); end

  # Returns settings for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-get-settings.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_settings.rb:37
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_template.rb:33
  def get_template(arguments = T.unsafe(nil)); end

  # DEPRECATED Returns a progress status of current upgrade.
  #
  # *Deprecation notice*:
  # The _upgrade API is no longer useful and will be removed. Instead, see _reindex API.
  # Deprecated since version 8.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-upgrade.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/get_upgrade.rb:37
  def get_upgrade(arguments = T.unsafe(nil)); end

  # Opens an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-open-close.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/open.rb:35
  def open(arguments = T.unsafe(nil)); end

  # Creates or updates an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-aliases.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/put_alias.rb:33
  def put_alias(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/put_index_template.rb:33
  def put_index_template(arguments = T.unsafe(nil)); end

  # Updates the index mappings.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-put-mapping.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/put_mapping.rb:43
  def put_mapping(arguments = T.unsafe(nil)); end

  # Updates the index settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-update-settings.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/put_settings.rb:37
  def put_settings(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/put_template.rb:34
  def put_template(arguments = T.unsafe(nil)); end

  # Returns information about ongoing index shard recoveries.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-recovery.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/recovery.rb:31
  def recovery(arguments = T.unsafe(nil)); end

  # Performs the refresh operation in one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-refresh.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/refresh.rb:32
  def refresh(arguments = T.unsafe(nil)); end

  # Returns information about any matching indices, aliases, and data streams
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-resolve-index-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/resolve_index.rb:30
  def resolve_index(arguments = T.unsafe(nil)); end

  # Updates an alias to point to a new index when the existing index
  # is considered to be too large or too old.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-rollover-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/rollover.rb:37
  def rollover(arguments = T.unsafe(nil)); end

  # Provides low-level information about segments in a Lucene index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-segments.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/segments.rb:33
  def segments(arguments = T.unsafe(nil)); end

  # Provides store information for shard copies of indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-shards-stores.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/shard_stores.rb:33
  def shard_stores(arguments = T.unsafe(nil)); end

  # Allow to shrink an existing index into a new index with fewer primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-shrink-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/shrink.rb:35
  def shrink(arguments = T.unsafe(nil)); end

  # Simulate matching the given index name against the index templates in the system
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/simulate_index_template.rb:33
  def simulate_index_template(arguments = T.unsafe(nil)); end

  # Simulate resolving the given template name or body
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-templates.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/simulate_template.rb:33
  def simulate_template(arguments = T.unsafe(nil)); end

  # Allows you to split an existing index into a new index with more primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-split-index.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/split.rb:35
  def split(arguments = T.unsafe(nil)); end

  # Provides statistics on operations happening in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-stats.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/stats.rb:40
  def stats(arguments = T.unsafe(nil)); end

  # Updates index aliases.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-aliases.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/update_aliases.rb:31
  def update_aliases(arguments = T.unsafe(nil)); end

  # DEPRECATED Upgrades to the current version of Lucene.
  #
  # *Deprecation notice*:
  # The _upgrade API is no longer useful and will be removed. Instead, see _reindex API.
  # Deprecated since version 8.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/indices-upgrade.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/upgrade.rb:39
  def upgrade(arguments = T.unsafe(nil)); end

  # Allows a user to validate a potentially expensive query without executing it.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-validate.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/validate_query.rb:48
  def validate_query(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/params_registry.rb:22
module Elasticsearch::API::Indices::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Indices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/indices/params_registry.rb:28
Elasticsearch::API::Indices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "indices" namespace (includes the {Indices::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/indices.rb:25
class Elasticsearch::API::Indices::IndicesClient
  include ::Elasticsearch::API::Indices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/params_registry.rb:20
module Elasticsearch::API::Ingest
  # Proxy method for {IngestClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/ingest.rb:31
  def ingest; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/params_registry.rb:21
module Elasticsearch::API::Ingest::Actions
  # Deletes a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/delete-pipeline-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/delete_pipeline.rb:31
  def delete_pipeline(arguments = T.unsafe(nil)); end

  # Returns statistical information about geoip databases
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/geoip-stats-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/geo_ip_stats.rb:28
  def geo_ip_stats(arguments = T.unsafe(nil)); end

  # Returns a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/get-pipeline-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/get_pipeline.rb:31
  def get_pipeline(arguments = T.unsafe(nil)); end

  # Returns a list of the built-in patterns.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/grok-processor.html#grok-processor-rest-get
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/processor_grok.rb:28
  def processor_grok(arguments = T.unsafe(nil)); end

  # Creates or updates a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/put-pipeline-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/put_pipeline.rb:33
  def put_pipeline(arguments = T.unsafe(nil)); end

  # Allows to simulate a pipeline with example documents.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/simulate-pipeline-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/simulate.rb:31
  def simulate(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/params_registry.rb:22
module Elasticsearch::API::Ingest::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Ingest::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/ingest/params_registry.rb:28
Elasticsearch::API::Ingest::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "ingest" namespace (includes the {Ingest::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/ingest.rb:25
class Elasticsearch::API::Ingest::IngestClient
  include ::Elasticsearch::API::Ingest::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/params_registry.rb:20
module Elasticsearch::API::Nodes
  # Proxy method for {NodesClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/nodes.rb:31
  def nodes; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/params_registry.rb:21
module Elasticsearch::API::Nodes::Actions
  # Removes the archived repositories metering information present in the cluster.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/clear-repositories-metering-archive-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/clear_repositories_metering_archive.rb:34
  def clear_repositories_metering_archive(arguments = T.unsafe(nil)); end

  # Returns cluster repositories metering information.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/get-repositories-metering-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/get_repositories_metering_info.rb:33
  def get_repositories_metering_info(arguments = T.unsafe(nil)); end

  # Returns information about hot threads on each node in the cluster.
  #
  # *Deprecation notice*:
  # The hot accepts /_cluster/nodes as prefix for backwards compatibility reasons
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-nodes-hot-threads.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/hot_threads.rb:41
  def hot_threads(arguments = T.unsafe(nil)); end

  # Returns information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-nodes-info.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/info.rb:32
  def info(arguments = T.unsafe(nil)); end

  # Reloads secure settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/secure-settings.html#reloadable-secure-settings
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/reload_secure_settings.rb:31
  def reload_secure_settings(arguments = T.unsafe(nil)); end

  # Returns statistical information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-nodes-stats.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/stats.rb:40
  def stats(arguments = T.unsafe(nil)); end

  # Returns low-level information about REST actions usage on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-nodes-usage.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/usage.rb:31
  def usage(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/params_registry.rb:22
module Elasticsearch::API::Nodes::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Nodes::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/nodes/params_registry.rb:28
Elasticsearch::API::Nodes::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "nodes" namespace (includes the {Nodes::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/nodes.rb:25
class Elasticsearch::API::Nodes::NodesClient
  include ::Elasticsearch::API::Nodes::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/remote.rb:20
module Elasticsearch::API::Remote
  # Proxy method for {RemoteClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/remote.rb:31
  def remote; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/remote.rb:21
module Elasticsearch::API::Remote::Actions; end

# Client for the "remote" namespace (includes the {Remote::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/remote.rb:25
class Elasticsearch::API::Remote::RemoteClient
  include ::Elasticsearch::API::Remote::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/security.rb:20
module Elasticsearch::API::Security
  # Proxy method for {SecurityClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/security.rb:31
  def security; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/security.rb:21
module Elasticsearch::API::Security::Actions; end

# Client for the "security" namespace (includes the {Security::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/security.rb:25
class Elasticsearch::API::Security::SecurityClient
  include ::Elasticsearch::API::Security::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/params_registry.rb:20
module Elasticsearch::API::Shutdown
  # Proxy method for {ShutdownClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/shutdown.rb:31
  def shutdown; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/params_registry.rb:21
module Elasticsearch::API::Shutdown::Actions
  # Removes a node from the shutdown list. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/delete_node.rb:29
  def delete_node(arguments = T.unsafe(nil)); end

  # Retrieve status of a node or nodes that are currently marked as shutting down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/get_node.rb:29
  def get_node(arguments = T.unsafe(nil)); end

  # Adds a node to be shut down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/put_node.rb:30
  def put_node(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/params_registry.rb:22
module Elasticsearch::API::Shutdown::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Shutdown::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/shutdown/params_registry.rb:28
Elasticsearch::API::Shutdown::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "shutdown" namespace (includes the {Shutdown::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/shutdown.rb:25
class Elasticsearch::API::Shutdown::ShutdownClient
  include ::Elasticsearch::API::Shutdown::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/params_registry.rb:20
module Elasticsearch::API::Snapshot
  # Proxy method for {SnapshotClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/snapshot.rb:31
  def snapshot; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/params_registry.rb:21
module Elasticsearch::API::Snapshot::Actions
  # Removes stale data from repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/clean-up-snapshot-repo-api.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/cleanup_repository.rb:31
  def cleanup_repository(arguments = T.unsafe(nil)); end

  # Clones indices from one snapshot into another snapshot in the same repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/clone.rb:33
  def clone(arguments = T.unsafe(nil)); end

  # Creates a snapshot in a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/create.rb:33
  def create(arguments = T.unsafe(nil)); end

  # Creates a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/create_repository.rb:33
  def create_repository(arguments = T.unsafe(nil)); end

  # Deletes a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/delete.rb:31
  def delete(arguments = T.unsafe(nil)); end

  # Deletes a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/delete_repository.rb:31
  def delete_repository(arguments = T.unsafe(nil)); end

  # Returns information about a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/get.rb:42
  def get(arguments = T.unsafe(nil)); end

  # Returns information about a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/get_repository.rb:31
  def get_repository(arguments = T.unsafe(nil)); end

  # Analyzes a repository for correctness and performance
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/repository_analyze.rb:40
  def repository_analyze(arguments = T.unsafe(nil)); end

  # Restores a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/restore.rb:33
  def restore(arguments = T.unsafe(nil)); end

  # Returns information about the status of a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/status.rb:32
  def status(arguments = T.unsafe(nil)); end

  # Verifies a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/modules-snapshots.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/verify_repository.rb:31
  def verify_repository(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/params_registry.rb:22
module Elasticsearch::API::Snapshot::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Snapshot::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/snapshot/params_registry.rb:28
Elasticsearch::API::Snapshot::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "snapshot" namespace (includes the {Snapshot::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/snapshot.rb:25
class Elasticsearch::API::Snapshot::SnapshotClient
  include ::Elasticsearch::API::Snapshot::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/params_registry.rb:20
module Elasticsearch::API::Tasks
  # Proxy method for {TasksClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/tasks.rb:31
  def tasks; end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/params_registry.rb:21
module Elasticsearch::API::Tasks::Actions
  # Cancels a task, if it can be cancelled through an API.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/tasks.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/cancel.rb:37
  def cancel(arguments = T.unsafe(nil)); end

  # Returns information about a task.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/tasks.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/get.rb:35
  def get(arguments = T.unsafe(nil)); end

  # Returns a list of tasks.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/7.17/tasks.html
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/list.rb:39
  def list(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/params_registry.rb:22
module Elasticsearch::API::Tasks::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Tasks::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/params_registry.rb:53
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/params_registry.rb:39
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/actions/tasks/params_registry.rb:28
Elasticsearch::API::Tasks::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "tasks" namespace (includes the {Tasks::Actions} methods)
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/namespace/tasks.rb:25
class Elasticsearch::API::Tasks::TasksClient
  include ::Elasticsearch::API::Tasks::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:58
Elasticsearch::API::UNDERSCORE_ALL = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api.rb:57
Elasticsearch::API::UNDERSCORE_SEARCH = T.let(T.unsafe(nil), String)

# Generic utility methods
#
# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:23
module Elasticsearch::API::Utils
  extend ::Elasticsearch::API::Utils

  # Convert an array of payloads into Elasticsearch `header\ndata` format
  #
  # Supports various different formats of the payload: Array of Strings, Header/Data pairs,
  # or the conveniency "combined" format where data is passed along with the header
  # in a single item.
  #
  #     Elasticsearch::API::Utils.__bulkify [
  #       { :index =>  { :_index => 'myindexA', :_type => 'mytype', :_id => '1', :data => { :title => 'Test' } } },
  #       { :update => { :_index => 'myindexB', :_type => 'mytype', :_id => '2', :data => { :doc => { :title => 'Update' } } } }
  #     ]
  #
  #     # => {"index":{"_index":"myindexA","_type":"mytype","_id":"1"}}
  #     # => {"title":"Test"}
  #     # => {"update":{"_index":"myindexB","_type":"mytype","_id":"2"}}
  #     # => {"doc":{"title":"Update"}}
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:99
  def __bulkify(payload); end

  # URL-escape a string
  #
  # @api private
  # @example
  #   __escape('foo/bar') # => 'foo%2Fbar'
  #   __escape('bar^bam') # => 'bar%5Ebam'
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:31
  def __escape(string); end

  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:175
  def __extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Extracts the valid parts of the URL from the arguments
  #
  # @api private
  # @example Extract parts
  #   __extract_parts { :foo => true }, [:foo, :bar]
  #   # => [:foo]
  # @note Mutates the `arguments` argument, to prevent failures in `__validate_and_extract_params`.
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_parts [Array<Symbol>] An array of symbol with valid keys
  # @return [Array<String>] Valid parts of the URL as an array of strings
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:198
  def __extract_parts(arguments, valid_parts = T.unsafe(nil)); end

  # Create a "list" of values from arguments, ignoring nil values and encoding special characters.
  #
  # @api private
  # @example Create a list from array
  #   __listify(['A','B']) # => 'A,B'
  # @example Create a list from arguments
  #   __listify('A','B') # => 'A,B'
  # @example Escape values
  #   __listify('foo','bar^bam') # => 'foo,bar%5Ebam'
  # @example Do not escape the values
  #   __listify('foo','bar^bam', escape: false) # => 'foo,bar^bam'
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:51
  def __listify(*list); end

  # Create a path (URL part) from arguments, ignoring nil values and empty strings.
  #
  # # @example Encode special characters
  #     __pathify(['foo', 'bar^bam']) # => 'foo/bar%5Ebam'
  #
  # @api private
  # @example Create a path from array
  #   __pathify(['foo', '', nil, 'bar']) # => 'foo/bar'
  # @example Create a path from arguments
  #   __pathify('foo', '', nil, 'bar') # => 'foo/bar'
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:75
  def __pathify(*segments); end

  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:269
  def __report_unsupported_method(name); end

  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:227
  def __report_unsupported_parameters(arguments, params = T.unsafe(nil)); end

  # Calls the given block, rescuing from `StandardError`.
  #
  # Primary use case is the `:ignore` parameter for API calls.
  #
  # Returns `false` if exception contains NotFound in its class name or message,
  # else re-raises the exception.
  #
  # @api private
  # @yield [block] A block of code to be executed with exception handling.
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:217
  def __rescue_from_not_found(&block); end

  # Validates the argument Hash against common and valid API parameters
  #
  # @api private
  # @example Extract parameters
  #   __validate_and_extract_params( { :foo => 'qux' }, [:foo, :bar] )
  #   # => { :foo => 'qux' }
  # @example Raise an exception for invalid parameters
  #   __validate_and_extract_params( { :foo => 'qux', :bam => 'mux' }, [:foo, :bar] )
  #   # ArgumentError: "URL parameter 'bam' is not supported"
  # @example Skip validating parameters
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar], { skip_parameter_validation: true } )
  #   # => { :foo => "q", :bam => "m" }
  # @example Skip validating parameters when the module setting is set
  #   Elasticsearch::API.settings[:skip_parameter_validation] = true
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar] )
  #   # => { :foo => "q", :bam => "m" }
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_params [Array<Symbol>] An array of symbols with valid keys
  # @raise [ArgumentError] If the arguments Hash contains invalid keys
  # @return [Hash] Return whitelisted Hash
  #
  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:159
  def __validate_and_extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:168
  def __validate_params(arguments, valid_params = T.unsafe(nil)); end

  # source://elasticsearch-api-7.17.11/lib/elasticsearch/api/utils.rb:284
  def ndjson_headers(headers); end
end

# source://elasticsearch-api-7.17.11/lib/elasticsearch/api/version.rb:20
Elasticsearch::API::VERSION = T.let(T.unsafe(nil), String)

# source://elasticsearch-7.17.11/lib/elasticsearch.rb:24
Elasticsearch::NOT_ELASTICSEARCH_WARNING = T.let(T.unsafe(nil), String)

# source://elasticsearch-7.17.11/lib/elasticsearch.rb:25
Elasticsearch::NOT_SUPPORTED_ELASTICSEARCH_WARNING = T.let(T.unsafe(nil), String)

# source://elasticsearch-7.17.11/lib/elasticsearch.rb:23
Elasticsearch::SECURITY_PRIVILEGES_VALIDATION_WARNING = T.let(T.unsafe(nil), String)

# source://elasticsearch-7.17.11/lib/elasticsearch/version.rb:19
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)

# source://elasticsearch-7.17.11/lib/elasticsearch.rb:26
Elasticsearch::YOU_KNOW_FOR_SEARCH = T.let(T.unsafe(nil), String)
