# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activestorage` gem.
# Please instead update this file by running `bin/tapioca gem activestorage`.

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:3
module ActiveStorage
  extend ::ActiveSupport::Autoload

  # source://activestorage-6.1.7.10/lib/active_storage.rb:51
  def analyzers; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:51
  def analyzers=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:57
  def binary_content_type; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:57
  def binary_content_type=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:59
  def content_types_allowed_inline; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:59
  def content_types_allowed_inline=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:58
  def content_types_to_serve_as_binary; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:58
  def content_types_to_serve_as_binary=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:355
  def draw_routes; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:355
  def draw_routes=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:44
  def logger; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:44
  def logger=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:53
  def paths; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:53
  def paths=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:50
  def previewers; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:50
  def previewers=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:48
  def queues; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:48
  def queues=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:358
  def replace_on_assign_to_many; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:358
  def replace_on_assign_to_many=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:356
  def resolve_model_to_route; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:356
  def resolve_model_to_route=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:354
  def routes_prefix; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:354
  def routes_prefix=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:352
  def service_urls_expire_in; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:352
  def service_urls_expire_in=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:61
  def supported_image_processing_methods; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:61
  def supported_image_processing_methods=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:359
  def track_variants; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:359
  def track_variants=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:350
  def unsupported_image_processing_arguments; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:350
  def unsupported_image_processing_arguments=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:55
  def variable_content_types; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:55
  def variable_content_types=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:46
  def variant_processor; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:46
  def variant_processor=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:45
  def verifier; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:45
  def verifier=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:361
  def video_preview_arguments; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:361
  def video_preview_arguments=(val); end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:56
  def web_image_content_types; end

  # source://activestorage-6.1.7.10/lib/active_storage.rb:56
  def web_image_content_types=(val); end

  class << self
    # source://activestorage-6.1.7.10/lib/active_storage.rb:51
    def analyzers; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:51
    def analyzers=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:57
    def binary_content_type; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:57
    def binary_content_type=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:59
    def content_types_allowed_inline; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:59
    def content_types_allowed_inline=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:58
    def content_types_to_serve_as_binary; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:58
    def content_types_to_serve_as_binary=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:355
    def draw_routes; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:355
    def draw_routes=(val); end

    # Returns the version of the currently loaded Active Storage as a <tt>Gem::Version</tt>.
    #
    # source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:5
    def gem_version; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:44
    def logger; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:44
    def logger=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:53
    def paths; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:53
    def paths=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:50
    def previewers; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:50
    def previewers=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:48
    def queues; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:48
    def queues=(val); end

    # source://railties-6.1.7.10/lib/rails/engine.rb:405
    def railtie_helpers_paths; end

    # source://railties-6.1.7.10/lib/rails/engine.rb:394
    def railtie_namespace; end

    # source://railties-6.1.7.10/lib/rails/engine.rb:409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:358
    def replace_on_assign_to_many; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:358
    def replace_on_assign_to_many=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:356
    def resolve_model_to_route; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:356
    def resolve_model_to_route=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:354
    def routes_prefix; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:354
    def routes_prefix=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:352
    def service_urls_expire_in; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:352
    def service_urls_expire_in=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:61
    def supported_image_processing_methods; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:61
    def supported_image_processing_methods=(val); end

    # source://railties-6.1.7.10/lib/rails/engine.rb:397
    def table_name_prefix; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:359
    def track_variants; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:359
    def track_variants=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:350
    def unsupported_image_processing_arguments; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:350
    def unsupported_image_processing_arguments=(val); end

    # source://railties-6.1.7.10/lib/rails/engine.rb:401
    def use_relative_model_naming?; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:55
    def variable_content_types; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:55
    def variable_content_types=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:46
    def variant_processor; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:46
    def variant_processor=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:45
    def verifier; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:45
    def verifier=(val); end

    # Returns the version of the currently loaded ActiveStorage as a <tt>Gem::Version</tt>
    #
    # source://activestorage-6.1.7.10/lib/active_storage/version.rb:7
    def version; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:361
    def video_preview_arguments; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:361
    def video_preview_arguments=(val); end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:56
    def web_image_content_types; end

    # source://activestorage-6.1.7.10/lib/active_storage.rb:56
    def web_image_content_types=(val); end
  end
end

# source://activestorage-6.1.7.10/app/jobs/active_storage/analyze_job.rb:4
class ActiveStorage::AnalyzeJob < ::ActiveStorage::BaseJob
  # source://activestorage-6.1.7.10/app/jobs/active_storage/analyze_job.rb:10
  def perform(blob); end

  class << self
    # source://activejob-6.1.7.10/lib/active_job/queue_name.rb:56
    def queue_name; end

    # source://activesupport-6.1.7.10/lib/active_support/rescuable.rb:13
    def rescue_handlers; end
  end
end

# This is an abstract base class for analyzers, which extract metadata from blobs. See
# ActiveStorage::Analyzer::ImageAnalyzer for an example of a concrete subclass.
#
# source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:6
class ActiveStorage::Analyzer
  # @return [Analyzer] a new instance of Analyzer
  #
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:21
  def initialize(blob); end

  # Returns the value of attribute blob.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:7
  def blob; end

  # Override this method in a concrete subclass. Have it return a Hash of metadata.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:26
  def metadata; end

  private

  # Downloads the blob to a tempfile on disk. Yields the tempfile.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:32
  def download_blob_to_tempfile(&block); end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:36
  def logger; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:40
  def tmpdir; end

  class << self
    # Implement this method in a concrete subclass. Have it return true when given a blob from which
    # the analyzer can extract metadata.
    #
    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:11
    def accept?(blob); end

    # Implement this method in concrete subclasses. It will determine if blob analysis
    # should be done in a job or performed inline. By default, analysis is enqueued in a job.
    #
    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/analyzer.rb:17
    def analyze_later?; end
  end
end

# Extracts width and height in pixels from an image blob.
#
# If the image contains EXIF data indicating its angle is 90 or 270 degrees, its width and height are swapped for convenience.
#
# Example:
#
#   ActiveStorage::Analyzer::ImageAnalyzer.new(blob).metadata
#   # => { width: 4104, height: 2736 }
#
# This analyzer relies on the third-party {MiniMagick}[https://github.com/minimagick/minimagick] gem. MiniMagick requires
# the {ImageMagick}[http://www.imagemagick.org] system library.
#
# source://activestorage-6.1.7.10/lib/active_storage/analyzer/image_analyzer.rb:15
class ActiveStorage::Analyzer::ImageAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/image_analyzer.rb:20
  def metadata; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/image_analyzer.rb:31
  def read_image; end

  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/image_analyzer.rb:51
  def rotated_image?(image); end

  class << self
    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/analyzer/image_analyzer.rb:16
    def accept?(blob); end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/analyzer/null_analyzer.rb:4
class ActiveStorage::Analyzer::NullAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/null_analyzer.rb:13
  def metadata; end

  class << self
    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/analyzer/null_analyzer.rb:5
    def accept?(blob); end

    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/analyzer/null_analyzer.rb:9
    def analyze_later?; end
  end
end

# Extracts the following from a video blob:
#
# * Width (pixels)
# * Height (pixels)
# * Duration (seconds)
# * Angle (degrees)
# * Display aspect ratio
#
# Example:
#
#   ActiveStorage::Analyzer::VideoAnalyzer.new(blob).metadata
#   # => { width: 640.0, height: 480.0, duration: 5.0, angle: 0, display_aspect_ratio: [4, 3] }
#
# When a video's angle is 90 or 270 degrees, its width and height are automatically swapped for convenience.
#
# This analyzer requires the {FFmpeg}[https://www.ffmpeg.org] system library, which is not provided by Rails.
#
# source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:20
class ActiveStorage::Analyzer::VideoAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:25
  def metadata; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:51
  def angle; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:71
  def computed_height; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:102
  def container; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:55
  def display_aspect_ratio; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:85
  def display_height_scale; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:46
  def duration; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:81
  def encoded_height; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:77
  def encoded_width; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:125
  def ffprobe_path; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:38
  def height; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:106
  def probe; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:110
  def probe_from(file); end

  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:67
  def rotated?; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:98
  def streams; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:90
  def tags; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:94
  def video_stream; end

  # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:30
  def width; end

  class << self
    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/analyzer/video_analyzer.rb:21
    def accept?(blob); end
  end
end

# Abstract base class for the concrete ActiveStorage::Attached::One and ActiveStorage::Attached::Many
# classes that both provide proxy access to the blob association for a record.
#
# source://activestorage-6.1.7.10/lib/active_storage/attached.rb:8
class ActiveStorage::Attached
  # @return [Attached] a new instance of Attached
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached.rb:11
  def initialize(name, record); end

  # Returns the value of attribute name.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached.rb:9
  def name; end

  # Returns the value of attribute record.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached.rb:9
  def record; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/attached.rb:16
  def change; end
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/changes.rb:4
module ActiveStorage::Attached::Changes
  extend ::ActiveSupport::Autoload
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:4
class ActiveStorage::Attached::Changes::CreateMany
  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:7
  def initialize(name, record, attachables); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:5
  def attachables; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:12
  def attachments; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:16
  def blobs; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:5
  def name; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:5
  def record; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:24
  def save; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:20
  def upload; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:39
  def assign_associated_attachments; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:34
  def build_subchange_from(attachable); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:43
  def reset_associated_blobs; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_many.rb:30
  def subchanges; end
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:7
class ActiveStorage::Attached::Changes::CreateOne
  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:10
  def initialize(name, record, attachable); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:8
  def attachable; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:15
  def attachment; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:19
  def blob; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:8
  def name; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:8
  def record; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:32
  def save; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:23
  def upload; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:78
  def attachment_service_name; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:48
  def build_attachment; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:42
  def find_attachment; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:38
  def find_or_build_attachment; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one.rb:52
  def find_or_build_blob; end
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one_of_many.rb:4
class ActiveStorage::Attached::Changes::CreateOneOfMany < ::ActiveStorage::Attached::Changes::CreateOne
  private

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/create_one_of_many.rb:6
  def find_attachment; end
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:4
class ActiveStorage::Attached::Changes::DeleteMany
  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:7
  def initialize(name, record); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:11
  def attachables; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:15
  def attachments; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:19
  def blobs; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:5
  def name; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:5
  def record; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_many.rb:23
  def save; end
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_one.rb:4
class ActiveStorage::Attached::Changes::DeleteOne
  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_one.rb:7
  def initialize(name, record); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_one.rb:11
  def attachment; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_one.rb:5
  def name; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_one.rb:5
  def record; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/changes/delete_one.rb:15
  def save; end
end

# Decorated proxy object representing of multiple attachments to a model.
#
# source://activestorage-6.1.7.10/lib/active_storage/attached/many.rb:5
class ActiveStorage::Attached::Many < ::ActiveStorage::Attached
  # Attaches one or more +attachables+ to the record.
  #
  # If the record is persisted and unchanged, the attachments are saved to
  # the database immediately. Otherwise, they'll be saved to the DB when the
  # record is next saved.
  #
  #   document.images.attach(params[:images]) # Array of ActionDispatch::Http::UploadedFile objects
  #   document.images.attach(params[:signed_blob_id]) # Signed reference to blob from direct upload
  #   document.images.attach(io: File.open("/path/to/racecar.jpg"), filename: "racecar.jpg", content_type: "image/jpg")
  #   document.images.attach([ first_blob, second_blob ])
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/many.rb:30
  def attach(*attachables); end

  # Returns true if any attachments have been made.
  #
  #   class Gallery < ApplicationRecord
  #     has_many_attached :photos
  #   end
  #
  #   Gallery.new.photos.attached? # => false
  #
  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/many.rb:46
  def attached?; end

  # Returns all the associated attachment records.
  #
  # All methods called on this proxy object that aren't listed here will automatically be delegated to +attachments+.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/many.rb:11
  def attachments; end

  # Returns all attached blobs.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/many.rb:16
  def blobs; end

  # Deletes associated attachments without purging them, leaving their respective blobs in place.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/many.rb:51
  def detach; end

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:308
  def method_missing(method, *args, &block); end

  private

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# Provides the class-level DSL for declaring an Active Record model's attachments.
#
# source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:7
module ActiveStorage::Attached::Model
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveStorage::Attached::Model::ClassMethods

  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:194
  def attachment_changes; end

  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:198
  def changed_for_autosave?; end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:208
  def reload(*_arg0); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:202
  def initialize_dup(*_arg0); end
end

# source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:0
module ActiveStorage::Attached::Model::ClassMethods
  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:128
  def has_many_attached(name, dependent: T.unsafe(nil), service: T.unsafe(nil), strict_loading: T.unsafe(nil)); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:50
  def has_one_attached(name, dependent: T.unsafe(nil), service: T.unsafe(nil), strict_loading: T.unsafe(nil)); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/attached/model.rb:185
  def validate_service_configuration(association_name, service); end
end

# Representation of a single attachment to a model.
#
# source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:5
class ActiveStorage::Attached::One < ::ActiveStorage::Attached
  # Attaches an +attachable+ to the record.
  #
  # If the record is persisted and unchanged, the attachment is saved to
  # the database immediately. Otherwise, it'll be saved to the DB when the
  # record is next saved.
  #
  #   person.avatar.attach(params[:avatar]) # ActionDispatch::Http::UploadedFile object
  #   person.avatar.attach(params[:signed_blob_id]) # Signed reference to blob from direct upload
  #   person.avatar.attach(io: File.open("/path/to/face.jpg"), filename: "face.jpg", content_type: "image/jpg")
  #   person.avatar.attach(avatar_blob) # ActiveStorage::Blob object
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:30
  def attach(attachable); end

  # Returns +true+ if an attachment has been made.
  #
  #   class User < ApplicationRecord
  #     has_one_attached :avatar
  #   end
  #
  #   User.new.avatar.attached? # => false
  #
  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:46
  def attached?; end

  # Returns the associated attachment record.
  #
  # You don't have to call this method to access the attachment's methods as
  # they are all available at the model level.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:12
  def attachment; end

  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:16
  def blank?; end

  # Deletes the attachment without purging it, leaving its blob in place.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:51
  def detach; end

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:308
  def method_missing(method, *args, &block); end

  # Directly purges the attachment (i.e. destroys the blob and
  # attachment and deletes the file on the service).
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:60
  def purge; end

  # Purges the attachment through the queuing system.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:68
  def purge_later; end

  private

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://activestorage-6.1.7.10/lib/active_storage/attached/one.rb:76
  def write_attachment(attachment); end
end

# source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:10
class ActiveStorage::Attachment < ::ActiveStorage::Record
  include ::ActiveStorage::Attachment::GeneratedAttributeMethods
  include ::ActiveStorage::Attachment::GeneratedAssociationMethods

  # source://activerecord-6.1.7.10/lib/active_record/autosave_association.rb:175
  def autosave_associated_records_for_blob(*args); end

  # source://activerecord-6.1.7.10/lib/active_record/autosave_association.rb:175
  def autosave_associated_records_for_record(*args); end

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:308
  def method_missing(method, *args, &block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:23
  def purge; end

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:32
  def purge_later; end

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:17
  def signed_id(*_arg0, &_arg1); end

  # source://activerecord-6.1.7.10/lib/active_record/autosave_association.rb:175
  def validate_associated_records_for_blob(*args); end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:41
  def analyze_blob_later; end

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:53
  def dependent; end

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:45
  def mirror_blob_later; end

  # source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:49
  def purge_dependent_blob_later; end

  # source://activesupport-6.1.7.10/lib/active_support/core_ext/module/delegation.rb:300
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://activerecord-6.1.7.10/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-6.1.7.10/lib/active_record/enum.rb:109
    def defined_enums; end
  end
end

# source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:0
module ActiveStorage::Attachment::GeneratedAssociationMethods
  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:102
  def blob; end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:110
  def blob=(value); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:28
  def build_blob(*args, &block); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:32
  def create_blob(*args, &block); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:36
  def create_blob!(*args, &block); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:102
  def record; end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:110
  def record=(value); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:19
  def reload_blob; end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:19
  def reload_record; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/attachment.rb:0
module ActiveStorage::Attachment::GeneratedAttributeMethods; end

# source://activestorage-6.1.7.10/app/controllers/active_storage/base_controller.rb:4
class ActiveStorage::BaseController < ::ActionController::Base
  include ::ActiveStorage::SetCurrent

  private

  # source://actionview-6.1.7.10/lib/action_view/layouts.rb:325
  def _layout(lookup_context, formats); end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/base_controller.rb:12
  def stream(blob); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://actionpack-6.1.7.10/lib/action_controller/metal/etag_with_template_digest.rb:27
    def etag_with_template_digest; end

    # source://actionpack-6.1.7.10/lib/action_controller/metal.rb:212
    def middleware_stack; end
  end
end

# source://activestorage-6.1.7.10/app/jobs/active_storage/base_job.rb:3
class ActiveStorage::BaseJob < ::ActiveJob::Base; end

# source://activestorage-6.1.7.10/app/models/active_storage/blob.rb:32
class ActiveStorage::Blob < ::ActiveStorage::Record
  include ::ActiveStorage::Blob::GeneratedAttributeMethods
  include ::ActiveStorage::Blob::GeneratedAssociationMethods

  class << self
    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-6.1.7.10/lib/active_record/enum.rb:109
    def defined_enums; end
  end
end

# source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:5
module ActiveStorage::Blob::Analyzable
  # source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:28
  def analyze; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:36
  def analyze_later; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:45
  def analyzed?; end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:54
  def analyzer; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:58
  def analyzer_class; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/analyzable.rb:50
  def extract_metadata_via_analyzer; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/blob.rb:0
module ActiveStorage::Blob::GeneratedAssociationMethods; end

# source://activestorage-6.1.7.10/app/models/active_storage/blob.rb:0
module ActiveStorage::Blob::GeneratedAttributeMethods; end

# source://activestorage-6.1.7.10/app/models/active_storage/blob/identifiable.rb:3
module ActiveStorage::Blob::Identifiable
  # source://activestorage-6.1.7.10/app/models/active_storage/blob/identifiable.rb:16
  def identified?; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/identifiable.rb:4
  def identify; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/identifiable.rb:9
  def identify_without_saving; end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/identifiable.rb:25
  def download_identifiable_chunk; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/identifiable.rb:21
  def identify_content_type; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:5
module ActiveStorage::Blob::Representable
  extend ::ActiveSupport::Concern

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:61
  def preview(transformations); end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:70
  def previewable?; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:95
  def representable?; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:83
  def representation(transformations); end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:42
  def variable?; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:33
  def variant(transformations); end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:104
  def default_variant_format; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:100
  def default_variant_transformations; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:112
  def format; end

  # source://activestorage-6.1.7.10/app/models/active_storage/blob/representable.rb:120
  def variant_class; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/current.rb:3
class ActiveStorage::Current < ::ActiveSupport::CurrentAttributes
  class << self
    # source://activesupport-6.1.7.10/lib/active_support/current_attributes.rb:114
    def host; end

    # source://activesupport-6.1.7.10/lib/active_support/current_attributes.rb:118
    def host=(attribute); end
  end
end

# source://activestorage-6.1.7.10/app/controllers/active_storage/direct_uploads_controller.rb:6
class ActiveStorage::DirectUploadsController < ::ActiveStorage::BaseController
  # source://activestorage-6.1.7.10/app/controllers/active_storage/direct_uploads_controller.rb:7
  def create; end

  private

  # source://actionview-6.1.7.10/lib/action_view/layouts.rb:325
  def _layout(lookup_context, formats); end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/direct_uploads_controller.rb:13
  def blob_args; end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/direct_uploads_controller.rb:17
  def direct_upload_json(blob); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://actionpack-6.1.7.10/lib/action_controller/metal.rb:212
    def middleware_stack; end
  end
end

# source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/disable_session.rb:4
module ActiveStorage::DisableSession
  extend ::ActiveSupport::Concern
end

# source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:7
class ActiveStorage::DiskController < ::ActiveStorage::BaseController
  include ::ActiveStorage::FileServer

  # source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:12
  def show; end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:22
  def update; end

  private

  # source://actionview-6.1.7.10/lib/action_view/layouts.rb:325
  def _layout(lookup_context, formats); end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:51
  def acceptable_content?(token); end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:43
  def decode_verified_key; end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:47
  def decode_verified_token; end

  # source://activestorage-6.1.7.10/app/controllers/active_storage/disk_controller.rb:37
  def named_disk_service(name); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://actionpack-6.1.7.10/lib/action_controller/metal.rb:212
    def middleware_stack; end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:4
class ActiveStorage::Downloader
  # @return [Downloader] a new instance of Downloader
  #
  # source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:7
  def initialize(service); end

  # source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:11
  def open(key, checksum:, name: T.unsafe(nil), tmpdir: T.unsafe(nil)); end

  # Returns the value of attribute service.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:5
  def service; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:30
  def download(key, file); end

  # source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:20
  def open_tempfile(name, tmpdir = T.unsafe(nil)); end

  # source://activestorage-6.1.7.10/lib/active_storage/downloader.rb:37
  def verify_integrity_of(file, checksum:); end
end

# source://activestorage-6.1.7.10/lib/active_storage/engine.rb:22
class ActiveStorage::Engine < ::Rails::Engine; end

# Generic base class for all Active Storage exceptions.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:5
class ActiveStorage::Error < ::StandardError; end

# Raised when ActiveStorage::Blob#download is called on a blob where the
# backing file is no longer present in its service.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:25
class ActiveStorage::FileNotFoundError < ::ActiveStorage::Error; end

# source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/file_server.rb:3
module ActiveStorage::FileServer
  private

  # source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/file_server.rb:5
  def serve_file(path, content_type:, disposition:); end
end

# source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:5
class ActiveStorage::Filename
  include ::Comparable

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:16
  def initialize(filename); end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:74
  def <=>(other); end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:66
  def as_json(*_arg0); end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:25
  def base; end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:45
  def extension; end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:35
  def extension_with_delimiter; end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:45
  def extension_without_delimiter; end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:57
  def sanitized; end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:70
  def to_json; end

  # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:62
  def to_s; end

  class << self
    # source://activestorage-6.1.7.10/app/models/active_storage/filename.rb:11
    def wrap(filename); end
  end
end

# Raised when uploaded or downloaded data does not match a precomputed checksum.
# Indicates that a network error or a software bug caused data corruption.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:21
class ActiveStorage::IntegrityError < ::ActiveStorage::Error; end

# Raised when ActiveStorage::Blob#variant is called on a blob that isn't variable.
# Use ActiveStorage::Blob#variable? to determine whether a blob is variable.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:9
class ActiveStorage::InvariableError < ::ActiveStorage::Error; end

# source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:6
class ActiveStorage::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:41
  def logger; end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:19
  def service_delete(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:23
  def service_delete_prefixed(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:13
  def service_download(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:27
  def service_exist(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:35
  def service_mirror(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:13
  def service_streaming_download(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:7
  def service_upload(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:31
  def service_url(event); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:50
  def debug(event, colored_message); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:46
  def info(event, colored_message); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:58
  def key_in(event); end

  # source://activestorage-6.1.7.10/lib/active_storage/log_subscriber.rb:54
  def log_prefix_for_service(event); end
end

# source://activestorage-6.1.7.10/app/jobs/active_storage/mirror_job.rb:6
class ActiveStorage::MirrorJob < ::ActiveStorage::BaseJob
  # source://activestorage-6.1.7.10/app/jobs/active_storage/mirror_job.rb:12
  def perform(key, checksum:); end

  class << self
    # source://activejob-6.1.7.10/lib/active_job/queue_name.rb:56
    def queue_name; end

    # source://activesupport-6.1.7.10/lib/active_support/rescuable.rb:13
    def rescue_handlers; end
  end
end

# source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:31
class ActiveStorage::Preview
  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:36
  def initialize(blob, variation_or_variation_key); end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:34
  def blob; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:81
  def download(&block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:52
  def image; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:73
  def key; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:46
  def processed; end

  # source://activesupport-6.1.7.10/lib/active_support/deprecation/method_wrappers.rb:63
  def service_url(*args, &block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:61
  def url(**options); end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:34
  def variation; end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:107
  def previewer; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:111
  def previewer_class; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:94
  def process; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:90
  def processed?; end

  # source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:102
  def variant; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/preview.rb:32
class ActiveStorage::Preview::UnprocessedError < ::StandardError; end

# Raised when a Previewer is unable to generate a preview image.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:28
class ActiveStorage::PreviewError < ::ActiveStorage::Error; end

# This is an abstract base class for previewers, which generate images from blobs. See
# ActiveStorage::Previewer::MuPDFPreviewer and ActiveStorage::Previewer::VideoPreviewer for
# examples of concrete subclasses.
#
# source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:7
class ActiveStorage::Previewer
  # @return [Previewer] a new instance of Previewer
  #
  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:16
  def initialize(blob); end

  # Returns the value of attribute blob.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:8
  def blob; end

  # Override this method in a concrete subclass. Have it yield an attachable preview image (i.e.
  # anything accepted by ActiveStorage::Attached::One#attach). Pass the additional options to
  # the underlying blob that is created.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:23
  def preview(**options); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:71
  def capture(*argv, to:); end

  # Downloads the blob to a tempfile on disk. Yields the tempfile.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:29
  def download_blob_to_tempfile(&block); end

  # Executes a system command, capturing its binary output in a tempfile. Yields the tempfile.
  #
  # Use this method to shell out to a system library (e.g. muPDF or FFmpeg) for preview image
  # generation. The resulting tempfile can be used as the +:io+ value in an attachable Hash:
  #
  #   def preview
  #     download_blob_to_tempfile do |input|
  #       draw "my-drawing-command", input.path, "--format", "png", "-" do |output|
  #         yield io: output, filename: "#{blob.filename.base}.png", content_type: "image/png"
  #       end
  #     end
  #   end
  #
  # The output tempfile is opened in the directory returned by #tmpdir.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:47
  def draw(*argv); end

  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:67
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:86
  def logger; end

  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:57
  def open_tempfile; end

  # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:90
  def tmpdir; end

  class << self
    # Implement this method in a concrete subclass. Have it return true when given a blob from which
    # the previewer can generate an image.
    #
    # @return [Boolean]
    #
    # source://activestorage-6.1.7.10/lib/active_storage/previewer.rb:12
    def accept?(blob); end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/previewer/mupdf_previewer.rb:4
class ActiveStorage::Previewer::MuPDFPreviewer < ::ActiveStorage::Previewer
  # source://activestorage-6.1.7.10/lib/active_storage/previewer/mupdf_previewer.rb:23
  def preview(**options); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/previewer/mupdf_previewer.rb:32
  def draw_first_page_from(file, &block); end

  class << self
    # source://activestorage-6.1.7.10/lib/active_storage/previewer/mupdf_previewer.rb:6
    def accept?(blob); end

    # source://activestorage-6.1.7.10/lib/active_storage/previewer/mupdf_previewer.rb:14
    def mutool_exists?; end

    # source://activestorage-6.1.7.10/lib/active_storage/previewer/mupdf_previewer.rb:10
    def mutool_path; end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/previewer/poppler_pdf_previewer.rb:4
class ActiveStorage::Previewer::PopplerPDFPreviewer < ::ActiveStorage::Previewer
  # source://activestorage-6.1.7.10/lib/active_storage/previewer/poppler_pdf_previewer.rb:21
  def preview(**options); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/previewer/poppler_pdf_previewer.rb:30
  def draw_first_page_from(file, &block); end

  class << self
    # source://activestorage-6.1.7.10/lib/active_storage/previewer/poppler_pdf_previewer.rb:6
    def accept?(blob); end

    # source://activestorage-6.1.7.10/lib/active_storage/previewer/poppler_pdf_previewer.rb:14
    def pdftoppm_exists?; end

    # source://activestorage-6.1.7.10/lib/active_storage/previewer/poppler_pdf_previewer.rb:10
    def pdftoppm_path; end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/previewer/video_previewer.rb:6
class ActiveStorage::Previewer::VideoPreviewer < ::ActiveStorage::Previewer
  # source://activestorage-6.1.7.10/lib/active_storage/previewer/video_previewer.rb:23
  def preview(**options); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/previewer/video_previewer.rb:32
  def draw_relevant_frame_from(file, &block); end

  class << self
    # source://activestorage-6.1.7.10/lib/active_storage/previewer/video_previewer.rb:8
    def accept?(blob); end

    # source://activestorage-6.1.7.10/lib/active_storage/previewer/video_previewer.rb:12
    def ffmpeg_exists?; end

    # source://activestorage-6.1.7.10/lib/active_storage/previewer/video_previewer.rb:18
    def ffmpeg_path; end
  end
end

# source://activestorage-6.1.7.10/app/jobs/active_storage/purge_job.rb:4
class ActiveStorage::PurgeJob < ::ActiveStorage::BaseJob
  # source://activestorage-6.1.7.10/app/jobs/active_storage/purge_job.rb:10
  def perform(blob); end

  class << self
    # source://activejob-6.1.7.10/lib/active_job/queue_name.rb:56
    def queue_name; end

    # source://activesupport-6.1.7.10/lib/active_support/rescuable.rb:13
    def rescue_handlers; end
  end
end

# source://activestorage-6.1.7.10/app/models/active_storage/record.rb:3
class ActiveStorage::Record < ::ActiveRecord::Base
  include ::ActiveStorage::Record::GeneratedAttributeMethods
  include ::ActiveStorage::Record::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  extend ::Kaminari::ConfigurationMethods::ClassMethods

  class << self
    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-6.1.7.10/lib/active_record/enum.rb:109
    def defined_enums; end

    # source://kaminari-activerecord-1.2.2/lib/kaminari/activerecord/active_record_model_extension.rb:15
    def page(num = T.unsafe(nil)); end
  end
end

# source://activestorage-6.1.7.10/app/models/active_storage/record.rb:0
module ActiveStorage::Record::GeneratedAssociationMethods; end

# source://activestorage-6.1.7.10/app/models/active_storage/record.rb:0
module ActiveStorage::Record::GeneratedAttributeMethods; end

# source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:4
module ActiveStorage::Reflection; end

# source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:39
module ActiveStorage::Reflection::ActiveRecordExtensions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods

  module GeneratedClassMethods
    def attachment_reflections; end
    def attachment_reflections=(value); end
    def attachment_reflections?; end
  end

  module GeneratedInstanceMethods
    def attachment_reflections; end
    def attachment_reflections?; end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:46
module ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods
  # Returns an array of reflection objects for all the attachments in the
  # class.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:49
  def reflect_on_all_attachments; end

  # Returns the reflection object for the named +attachment+.
  #
  #    User.reflect_on_attachment(:avatar)
  #    # => the avatar reflection
  #
  # source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:58
  def reflect_on_attachment(attachment); end
end

# Holds all the metadata about a has_many_attached attachment as it was
# specified in the Active Record class.
#
# source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:15
class ActiveStorage::Reflection::HasManyAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:16
  def macro; end
end

# Holds all the metadata about a has_one_attached attachment as it was
# specified in the Active Record class.
#
# source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:7
class ActiveStorage::Reflection::HasOneAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:8
  def macro; end
end

# source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:21
module ActiveStorage::Reflection::ReflectionExtension
  # source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:22
  def add_attachment_reflection(model, name, reflection); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/reflection.rb:27
  def reflection_class_for(macro); end
end

# Abstract class serving as an interface for concrete services.
#
# The available services are:
#
# * +Disk+, to manage attachments saved directly on the hard drive.
# * +GCS+, to manage attachments through Google Cloud Storage.
# * +S3+, to manage attachments through Amazon S3.
# * +AzureStorage+, to manage attachments through Microsoft Azure Storage.
# * +Mirror+, to be able to use several services to manage attachments.
#
# Inside a Rails application, you can set-up your services through the
# generated <tt>config/storage.yml</tt> file and reference one
# of the aforementioned constant under the +service+ key. For example:
#
#   local:
#     service: Disk
#     root: <%= Rails.root.join("storage") %>
#
# You can checkout the service's constructor to know which keys are required.
#
# Then, in your application's configuration, you can specify the service to
# use like this:
#
#   config.active_storage.service = :local
#
# If you are using Active Storage outside of a Ruby on Rails application, you
# can configure the service to use like this:
#
#   ActiveStorage::Blob.service = ActiveStorage::Service.configure(
#     :Disk,
#     root: Pathname("/foo/bar/storage")
#   )
#
# source://activestorage-6.1.7.10/lib/active_storage/service.rb:41
class ActiveStorage::Service
  extend ::ActiveSupport::Autoload

  # Delete the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:94
  def delete(key); end

  # Delete files at keys starting with the +prefix+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:99
  def delete_prefixed(prefix); end

  # Return the content of the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:80
  def download(key); end

  # Return the partial content in the byte +range+ of the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:85
  def download_chunk(key, range); end

  # Return +true+ if a file exists at the +key+.
  #
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:104
  def exist?(key); end

  # Returns a Hash of headers for +url_for_direct_upload+ requests.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:136
  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end

  # Returns the value of attribute name.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:44
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:44
  def name=(_arg0); end

  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:89
  def open(*args, **options, &block); end

  # @return [Boolean]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:140
  def public?; end

  # Update metadata for the file identified by +key+ in the service.
  # Override in subclasses only if the service needs to store specific
  # metadata that has to be updated upon identification.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:76
  def update_metadata(key, **metadata); end

  # Upload the +io+ to the +key+ specified. If a +checksum+ is provided, the service will
  # ensure a match when the upload has completed or raise an ActiveStorage::IntegrityError.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:69
  def upload(key, io, checksum: T.unsafe(nil), **options); end

  # Returns the URL for the file at the +key+. This returns a permanent URL for public files, and returns a
  # short-lived URL for private files. For private files you can provide the +disposition+ (+:inline+ or +:attachment+),
  # +filename+, and +content_type+ that you wish the file to be served with on request. Additionally, you can also provide
  # the amount of seconds the URL will be valid for, specified in +expires_in+.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:112
  def url(key, **options); end

  # Returns a signed, temporary URL that a direct upload file can be PUT to on the +key+.
  # The URL will be valid for the amount of seconds specified in +expires_in+.
  # You must also provide the +content_type+, +content_length+, and +checksum+ of the file
  # that will be uploaded. All these attributes will be validated by the service upon upload.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:131
  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:165
  def content_disposition_with(filename:, type: T.unsafe(nil)); end

  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:154
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:145
  def private_url(key, expires_in:, filename:, disposition:, content_type:, **_arg5); end

  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:149
  def public_url(key, **_arg1); end

  # source://activestorage-6.1.7.10/lib/active_storage/service.rb:160
  def service_name; end

  class << self
    # Override in subclasses that stitch together multiple services and hence
    # need to build additional services using the configurator.
    #
    # Passes the configurator and all of the service's config as keyword args.
    #
    # See MirrorService for an example.
    #
    # source://activestorage-6.1.7.10/lib/active_storage/service.rb:60
    def build(configurator:, name:, service: T.unsafe(nil), **service_config); end

    # Configure an Active Storage service by name from a set of configurations,
    # typically loaded from a YAML file. The Active Storage engine uses this
    # to set the global Active Storage service when the app boots.
    #
    # source://activestorage-6.1.7.10/lib/active_storage/service.rb:50
    def configure(service_name, configurations); end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:4
class ActiveStorage::Service::Configurator
  # source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:11
  def initialize(configurations); end

  # source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:15
  def build(service_name); end

  # source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:5
  def configurations; end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:23
  def config_for(name); end

  # source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:29
  def resolve(class_name); end

  class << self
    # source://activestorage-6.1.7.10/lib/active_storage/service/configurator.rb:7
    def build(service_name, configurations); end
  end
end

# source://activestorage-6.1.7.10/lib/active_storage/service/registry.rb:4
class ActiveStorage::Service::Registry
  # source://activestorage-6.1.7.10/lib/active_storage/service/registry.rb:5
  def initialize(configurations); end

  # source://activestorage-6.1.7.10/lib/active_storage/service/registry.rb:10
  def fetch(name); end

  private

  # source://activestorage-6.1.7.10/lib/active_storage/service/registry.rb:26
  def configurations; end

  # source://activestorage-6.1.7.10/lib/active_storage/service/registry.rb:28
  def configurator; end

  # source://activestorage-6.1.7.10/lib/active_storage/service/registry.rb:26
  def services; end
end

# source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/set_blob.rb:3
module ActiveStorage::SetBlob
  extend ::ActiveSupport::Concern

  private

  # source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/set_blob.rb:11
  def set_blob; end
end

# source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/set_current.rb:7
module ActiveStorage::SetCurrent
  extend ::ActiveSupport::Concern
end

# source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/set_headers.rb:3
module ActiveStorage::SetHeaders
  extend ::ActiveSupport::Concern

  private

  # source://activestorage-6.1.7.10/app/controllers/concerns/active_storage/set_headers.rb:7
  def set_content_headers_from(blob); end
end

# source://activestorage-6.1.7.10/lib/active_storage.rb:363
module ActiveStorage::Transformers
  extend ::ActiveSupport::Autoload
end

# A Transformer applies a set of transformations to an image.
#
# The following concrete subclasses are included in Active Storage:
#
# * ActiveStorage::Transformers::ImageProcessingTransformer:
#   backed by ImageProcessing, a common interface for MiniMagick and ruby-vips
#
# source://activestorage-6.1.7.10/lib/active_storage/transformers/transformer.rb:11
class ActiveStorage::Transformers::Transformer
  # @return [Transformer] a new instance of Transformer
  #
  # source://activestorage-6.1.7.10/lib/active_storage/transformers/transformer.rb:14
  def initialize(transformations); end

  # Applies the transformations to the source image in +file+, producing a target image in the
  # specified +format+. Yields an open Tempfile containing the target image. Closes and unlinks
  # the output tempfile after yielding to the given block. Returns the result of the block.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/transformers/transformer.rb:21
  def transform(file, format:); end

  # Returns the value of attribute transformations.
  #
  # source://activestorage-6.1.7.10/lib/active_storage/transformers/transformer.rb:12
  def transformations; end

  private

  # Returns an open Tempfile containing a transformed image in the given +format+.
  # All subclasses implement this method.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage-6.1.7.10/lib/active_storage/transformers/transformer.rb:34
  def process(file, format:); end
end

# Raised when ActiveStorage::Blob#preview is called on a blob that isn't previewable.
# Use ActiveStorage::Blob#previewable? to determine whether a blob is previewable.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:13
class ActiveStorage::UnpreviewableError < ::ActiveStorage::Error; end

# Raised when ActiveStorage::Blob#representation is called on a blob that isn't representable.
# Use ActiveStorage::Blob#representable? to determine whether a blob is representable.
#
# source://activestorage-6.1.7.10/lib/active_storage/errors.rb:17
class ActiveStorage::UnrepresentableError < ::ActiveStorage::Error; end

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:9
module ActiveStorage::VERSION; end

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:10
ActiveStorage::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:11
ActiveStorage::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:13
ActiveStorage::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:15
ActiveStorage::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activestorage-6.1.7.10/lib/active_storage/gem_version.rb:12
ActiveStorage::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:53
class ActiveStorage::Variant
  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:58
  def initialize(blob, variation_or_variation_key); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:54
  def blob; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:56
  def content_type(*_arg0, &_arg1); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:56
  def content_type_for_serving(*_arg0, &_arg1); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:87
  def download(&block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:91
  def filename; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:97
  def forced_disposition_for_serving; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:102
  def image; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:69
  def key; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:63
  def processed; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:55
  def service(*_arg0, &_arg1); end

  # source://activesupport-6.1.7.10/lib/active_support/deprecation/method_wrappers.rb:63
  def service_url(*args, &block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:78
  def url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil)); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:54
  def variation; end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:111
  def process; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant.rb:107
  def processed?; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/variant_record.rb:3
class ActiveStorage::VariantRecord < ::ActiveStorage::Record
  include ::ActiveStorage::VariantRecord::GeneratedAttributeMethods
  include ::ActiveStorage::VariantRecord::GeneratedAssociationMethods

  # source://activerecord-6.1.7.10/lib/active_record/autosave_association.rb:175
  def autosave_associated_records_for_blob(*args); end

  class << self
    # source://activesupport-6.1.7.10/lib/active_support/callbacks.rb:67
    def __callbacks; end

    # source://activerecord-6.1.7.10/lib/active_record/reflection.rb:11
    def _reflections; end

    # source://activemodel-6.1.7.10/lib/active_model/validations.rb:52
    def _validators; end

    # source://activerecord-6.1.7.10/lib/active_record/enum.rb:109
    def defined_enums; end
  end
end

# source://activestorage-6.1.7.10/app/models/active_storage/variant_record.rb:0
module ActiveStorage::VariantRecord::GeneratedAssociationMethods
  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:102
  def blob; end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/association.rb:110
  def blob=(value); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:28
  def build_blob(*args, &block); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:32
  def create_blob(*args, &block); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:36
  def create_blob!(*args, &block); end

  # source://activerecord-6.1.7.10/lib/active_record/associations/builder/singular_association.rb:19
  def reload_blob; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/variant_record.rb:0
module ActiveStorage::VariantRecord::GeneratedAttributeMethods; end

# source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:3
class ActiveStorage::VariantWithRecord
  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:6
  def initialize(blob, variation); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:4
  def blob; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:27
  def download(*_arg0, &_arg1); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:23
  def image; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:27
  def key(*_arg0, &_arg1); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:15
  def process; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:10
  def processed; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:19
  def processed?; end

  # source://activesupport-6.1.7.10/lib/active_support/deprecation/method_wrappers.rb:63
  def service_url(*args, &block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:27
  def url(*_arg0, &_arg1); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:4
  def variation; end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:42
  def create_or_find_record(image:); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:51
  def record; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variant_with_record.rb:33
  def transform_blob; end
end

# source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:14
class ActiveStorage::Variation
  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:44
  def initialize(transformations); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:68
  def content_type; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:48
  def default_to(defaults); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:77
  def digest; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:60
  def format; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:73
  def key; end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:54
  def transform(file, &block); end

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:15
  def transformations; end

  private

  # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:82
  def transformer; end

  class << self
    # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:33
    def decode(key); end

    # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:39
    def encode(transformations); end

    # source://activestorage-6.1.7.10/app/models/active_storage/variation.rb:21
    def wrap(variator); end
  end
end
