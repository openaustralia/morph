# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sprockets-rails` gem.
# Please instead update this file by running `bin/tapioca gem sprockets-rails`.

# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:18
module Rails
  class << self
    # Returns the value of attribute app_class.
    #
    # source://railties-6.1.7.10/lib/rails.rb:38
    def app_class; end

    # Sets the attribute app_class
    #
    # @param value the value to set the attribute app_class to.
    #
    # source://railties-6.1.7.10/lib/rails.rb:38
    def app_class=(_arg0); end

    # source://railties-6.1.7.10/lib/rails.rb:39
    def application; end

    # Sets the attribute application
    #
    # @param value the value to set the attribute application to.
    #
    # source://railties-6.1.7.10/lib/rails.rb:37
    def application=(_arg0); end

    # source://railties-6.1.7.10/lib/rails.rb:112
    def autoloaders; end

    # source://railties-6.1.7.10/lib/rails.rb:50
    def backtrace_cleaner; end

    # Returns the value of attribute cache.
    #
    # source://railties-6.1.7.10/lib/rails.rb:38
    def cache; end

    # Sets the attribute cache
    #
    # @param value the value to set the attribute cache to.
    #
    # source://railties-6.1.7.10/lib/rails.rb:38
    def cache=(_arg0); end

    # The Configuration instance used to configure the Rails environment
    #
    # source://railties-6.1.7.10/lib/rails.rb:46
    def configuration; end

    # Returns the current Rails environment.
    #
    #   Rails.env # => "development"
    #   Rails.env.development? # => true
    #   Rails.env.production? # => false
    #
    # source://railties-6.1.7.10/lib/rails.rb:72
    def env; end

    # Sets the Rails environment.
    #
    #   Rails.env = "staging" # => "staging"
    #
    # source://railties-6.1.7.10/lib/rails.rb:79
    def env=(environment); end

    # Returns the version of the currently loaded Rails as a <tt>Gem::Version</tt>
    #
    # source://railties-6.1.7.10/lib/rails/gem_version.rb:5
    def gem_version; end

    # Returns all Rails groups for loading based on:
    #
    # * The Rails environment;
    # * The environment variable RAILS_GROUPS;
    # * The optional envs given as argument and the hash with group dependencies;
    #
    #  Rails.groups assets: [:development, :test]
    #  # => [:default, "development", :assets] for Rails.env == "development"
    #  # => [:default, "production"]           for Rails.env == "production"
    #
    # source://railties-6.1.7.10/lib/rails.rb:92
    def groups(*groups); end

    # source://railties-6.1.7.10/lib/rails.rb:43
    def initialize!(*_arg0, &_arg1); end

    # source://railties-6.1.7.10/lib/rails.rb:43
    def initialized?(*_arg0, &_arg1); end

    # Returns the value of attribute logger.
    #
    # source://railties-6.1.7.10/lib/rails.rb:38
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://railties-6.1.7.10/lib/rails.rb:38
    def logger=(_arg0); end

    # Returns a Pathname object of the public folder of the current
    # Rails project, otherwise it returns +nil+ if there is no project:
    #
    #   Rails.public_path
    #     # => #<Pathname:/Users/someuser/some/path/project/public>
    #
    # source://railties-6.1.7.10/lib/rails.rb:108
    def public_path; end

    # Returns a Pathname object of the current Rails project,
    # otherwise it returns +nil+ if there is no project:
    #
    #   Rails.root
    #     # => #<Pathname:/Users/someuser/some/path/project>
    #
    # source://railties-6.1.7.10/lib/rails.rb:63
    def root; end

    # Returns the version of the currently loaded Rails as a string.
    #
    # source://railties-6.1.7.10/lib/rails/version.rb:7
    def version; end
  end
end

# An Engine with the responsibility of coordinating the whole boot process.
#
# == Initialization
#
# Rails::Application is responsible for executing all railties and engines
# initializers. It also executes some bootstrap initializers (check
# Rails::Application::Bootstrap) and finishing initializers, after all the others
# are executed (check Rails::Application::Finisher).
#
# == Configuration
#
# Besides providing the same configuration as Rails::Engine and Rails::Railtie,
# the application object has several specific configurations, for example
# "cache_classes", "consider_all_requests_local", "filter_parameters",
# "logger" and so forth.
#
# Check Rails::Application::Configuration to see them all.
#
# == Routes
#
# The application object is also responsible for holding the routes and reloading routes
# whenever the files change in development.
#
# == Middlewares
#
# The Application is also responsible for building the middleware stack.
#
# == Booting process
#
# The application is also responsible for setting up and executing the booting
# process. From the moment you require "config/application.rb" in your app,
# the booting process goes like this:
#
#   1)  require "config/boot.rb" to set up load paths
#   2)  require railties and engines
#   3)  Define Rails.application as "class MyApp::Application < Rails::Application"
#   4)  Run config.before_configuration callbacks
#   5)  Load config/environments/ENV.rb
#   6)  Run config.before_initialize callbacks
#   7)  Run Railtie#initializer defined by railties, engines and application.
#       One by one, each engine sets up its load paths, routes and runs its config/initializers/* files.
#   8)  Custom Railtie#initializers added by railties, engines and applications are executed
#   9)  Build the middleware stack and run to_prepare callbacks
#   10) Run config.before_eager_load and eager_load! if eager_load is true
#   11) Run config.after_initialize callbacks
#
# == Multiple Applications
#
# If you decide to define multiple applications, then the first application
# that is initialized will be set to +Rails.application+, unless you override
# it with a different application.
#
# To create a new application, you can instantiate a new instance of a class
# that has already been created:
#
#   class Application < Rails::Application
#   end
#
#   first_application  = Application.new
#   second_application = Application.new(config: first_application.config)
#
# In the above example, the configuration from the first application was used
# to initialize the second application. You can also use the +initialize_copy+
# on one of the applications to create a copy of the application which shares
# the configuration.
#
# If you decide to define Rake tasks, runners, or initializers in an
# application other than +Rails.application+, then you must run them manually.
#
# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:19
class Rails::Application < ::Rails::Engine
  # @return [Application] a new instance of Application
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:128
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # Called from asset helpers to alert you if you reference an asset URL that
  # isn't precompiled and hence won't be available in production.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:38
  def asset_precompiled?(logical_path); end

  # Returns Sprockets::Environment for app config.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:31
  def assets; end

  # Returns Sprockets::Environment for app config.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:31
  def assets=(_arg0); end

  # Returns Sprockets::Manifest for app config.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:34
  def assets_manifest; end

  # Returns Sprockets::Manifest for app config.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:34
  def assets_manifest=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/engine.rb:520
  def build_middleware_stack; end

  # source://railties-6.1.7.10/lib/rails/application.rb:402
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:406
  def config=(_arg0); end

  # Convenience for loading config/foo.yml for the current Rails env.
  #
  # Examples:
  #
  #     # config/exception_notification.yml:
  #     production:
  #       url: http://127.0.0.1:8080
  #       namespace: my_app_production
  #
  #     development:
  #       url: http://localhost:3001
  #       namespace: my_app_development
  #
  #     # config/environments/production.rb
  #     Rails.application.configure do
  #       config.middleware.use ExceptionNotifier, config_for(:exception_notification)
  #     end
  #
  #     # You can also store configurations in a shared section which will be
  #     # merged with the environment configuration
  #
  #     # config/example.yml
  #     shared:
  #       foo:
  #         bar:
  #           baz: 1
  #
  #     development:
  #       foo:
  #         bar:
  #           qux: 2
  #
  #     # development environment
  #     Rails.application.config_for(:example)[:foo][:bar]
  #     # => { baz: 1, qux: 2 }
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:241
  def config_for(name, env: T.unsafe(nil)); end

  # Sends any console called in the instance of a new application up
  # to the +console+ method defined in Rails::Railtie.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:322
  def console(&blk); end

  # Decrypts the credentials hash as kept in +config/credentials.yml.enc+. This file is encrypted with
  # the Rails master key, which is either taken from <tt>ENV["RAILS_MASTER_KEY"]</tt> or from loading
  # +config/master.key+.
  # If specific credentials file exists for current environment, it takes precedence, thus for +production+
  # environment look first for +config/credentials/production.yml.enc+ with master key taken
  # from <tt>ENV["RAILS_MASTER_KEY"]</tt> or from loading +config/credentials/production.key+.
  # Default behavior can be overwritten by setting +config.credentials.content_path+ and +config.credentials.key_path+.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:450
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:422
  def credentials=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application.rb:123
  def default_url_options(*_arg0, &_arg1); end

  # source://railties-6.1.7.10/lib/rails/application.rb:123
  def default_url_options=(arg); end

  # Eager loads the application code.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:515
  def eager_load!; end

  # Shorthand to decrypt any encrypted configurations or files.
  #
  # For any file added with <tt>rails encrypted:edit</tt> call +read+ to decrypt
  # the file with the master key.
  # The master key is either stored in +config/master.key+ or <tt>ENV["RAILS_MASTER_KEY"]</tt>.
  #
  #   Rails.application.encrypted("config/mystery_man.txt.enc").read
  #   # => "We've met before, haven't we?"
  #
  # It's also possible to interpret encrypted YAML files with +config+.
  #
  #   Rails.application.encrypted("config/credentials.yml.enc").config
  #   # => { next_guys_line: "I don't think so. Where was it you think we met?" }
  #
  # Any top-level configs are also accessible directly on the return value:
  #
  #   Rails.application.encrypted("config/credentials.yml.enc").next_guys_line
  #   # => "I don't think so. Where was it you think we met?"
  #
  # The files or configs can also be encrypted with a custom key. To decrypt with
  # a key in the +ENV+, use:
  #
  #   Rails.application.encrypted("config/special_tokens.yml.enc", env_key: "SPECIAL_TOKENS")
  #
  # Or to decrypt with a file, that should be version control ignored, relative to +Rails.root+:
  #
  #   Rails.application.encrypted("config/special_tokens.yml.enc", key_path: "config/special_tokens.key")
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:481
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # Stores some of the Rails initial environment parameters which
  # will be used by middlewares and engines to configure themselves.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:268
  def env_config; end

  # Returns the value of attribute executor.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:121
  def executor; end

  # Sends any generators called in the instance of a new application up
  # to the +generators+ method defined in Rails::Railtie.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:328
  def generators(&blk); end

  # source://railties-6.1.7.10/lib/rails/application.rb:494
  def helpers_paths; end

  # Initialize the application passing the given group. By default, the
  # group is :default
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:389
  def initialize!(group = T.unsafe(nil)); end

  # Returns true if the application is initialized.
  #
  # @return [Boolean]
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:149
  def initialized?; end

  # Sends the initializers to the +initializer+ method defined in the
  # Rails::Initializable module. Each Rails::Application class has its own
  # set of initializers, as defined by the Initializable module.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:310
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties-6.1.7.10/lib/rails/application.rb:396
  def initializers; end

  # Sends the +isolate_namespace+ method up to the class method.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:339
  def isolate_namespace(mod); end

  # Returns the application's KeyGenerator
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:173
  def key_generator; end

  # Returns a message verifier object.
  #
  # This verifier can be used to generate and verify signed messages in the application.
  #
  # It is recommended not to use the same verifier for different things, so you can get different
  # verifiers passing the +verifier_name+ argument.
  #
  # ==== Parameters
  #
  # * +verifier_name+ - the name of the message verifier.
  #
  # ==== Examples
  #
  #     message = Rails.application.message_verifier('sensitive_data').generate('my sensible data')
  #     Rails.application.message_verifier('sensitive_data').verify(message)
  #     # => 'my sensible data'
  #
  # See the +ActiveSupport::MessageVerifier+ documentation for more information.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:199
  def message_verifier(verifier_name); end

  # Return an array of railties respecting the order they're loaded
  # and the order specified by the +railties_order+ config.
  #
  # While running initializers we need engines in reverse order here when
  # copying migrations from railties ; we need them in the order given by
  # +railties_order+.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:510
  def migration_railties; end

  # Lazy-load the precompile list so we don't cause asset compilation at app
  # boot time, but ensure we cache the list so we don't recompute it for each
  # request or test case.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:52
  def precompiled_assets(clear_cache = T.unsafe(nil)); end

  # If you try to define a set of Rake tasks on the instance, these will get
  # passed up to the Rake tasks defined on the application's class.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:303
  def rake_tasks(&block); end

  # Reload application routes regardless if they changed or not.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:168
  def reload_routes!; end

  # Returns the value of attribute reloader.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:121
  def reloader; end

  # Returns the value of attribute reloaders.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:121
  def reloaders; end

  # source://railties-6.1.7.10/lib/rails/application.rb:365
  def require_environment!; end

  # source://railties-6.1.7.10/lib/rails/application.rb:370
  def routes_reloader; end

  # source://railties-6.1.7.10/lib/rails/application.rb:153
  def run_load_hooks!; end

  # Sends any runner called in the instance of a new application up
  # to the +runner+ method defined in Rails::Railtie.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:316
  def runner(&blk); end

  # Returns the value of attribute sandbox.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:119
  def sandbox; end

  # Sets the attribute sandbox
  #
  # @param value the value to set the attribute sandbox to.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:119
  def sandbox=(_arg0); end

  # Returns the value of attribute sandbox.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:119
  def sandbox?; end

  # The secret_key_base is used as the input secret to the application's key generator, which in turn
  # is used to create all MessageVerifiers/MessageEncryptors, including the ones that sign and encrypt cookies.
  #
  # In development and test, this is randomly generated and stored in a
  # temporary file in <tt>tmp/development_secret.txt</tt>.
  #
  # In all other environments, we look for it first in ENV["SECRET_KEY_BASE"],
  # then credentials.secret_key_base, and finally secrets.secret_key_base. For most applications,
  # the correct place to store it is in the encrypted credentials file.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:433
  def secret_key_base; end

  # source://railties-6.1.7.10/lib/rails/application.rb:408
  def secrets; end

  # Sets the attribute secrets
  #
  # @param value the value to set the attribute secrets to.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:422
  def secrets=(_arg0); end

  # Sends any server called in the instance of a new application up
  # to the +server+ method defined in Rails::Railtie.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:334
  def server(&blk); end

  # source://railties-6.1.7.10/lib/rails/application.rb:490
  def to_app; end

  # Returns an array of file paths appended with a hash of
  # directories-extensions suitable for ActiveSupport::FileUpdateChecker
  # API.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:377
  def watchable_args; end

  protected

  # source://railties-6.1.7.10/lib/rails/application.rb:592
  def default_middleware_stack; end

  # Returns the ordered railties for this application considering railties_order.
  #
  # source://railties-6.1.7.10/lib/rails/application.rb:558
  def ordered_railties; end

  # source://railties-6.1.7.10/lib/rails/application.rb:580
  def railties_initializers(current); end

  # source://railties-6.1.7.10/lib/rails/application.rb:547
  def run_console_blocks(app); end

  # source://railties-6.1.7.10/lib/rails/application.rb:537
  def run_generators_blocks(app); end

  # source://railties-6.1.7.10/lib/rails/application.rb:542
  def run_runner_blocks(app); end

  # source://railties-6.1.7.10/lib/rails/application.rb:552
  def run_server_blocks(app); end

  # source://railties-6.1.7.10/lib/rails/application.rb:526
  def run_tasks_blocks(app); end

  # source://railties-6.1.7.10/lib/rails/application.rb:597
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties-6.1.7.10/lib/rails/application.rb:631
  def build_middleware; end

  # source://railties-6.1.7.10/lib/rails/application.rb:624
  def build_request(env); end

  # source://railties-6.1.7.10/lib/rails/application.rb:635
  def coerce_same_site_protection(protection); end

  # source://railties-6.1.7.10/lib/rails/application.rb:608
  def generate_development_secret; end

  class << self
    # This method is called just after an application inherits from Rails::Application,
    # allowing the developer to load classes in lib and use them during application
    # configuration.
    #
    #   class MyApplication < Rails::Application
    #     require "my_backend" # in lib/my_backend
    #     config.i18n.backend = MyBackend
    #   end
    #
    # Notice this method takes into consideration the default root path. So if you
    # are changing config.root inside your application definition or having a custom
    # Rails application, you will need to add lib to $LOAD_PATH on your own in case
    # you need to load files in lib/ during the application configuration as well.
    #
    # source://railties-6.1.7.10/lib/rails/application.rb:358
    def add_lib_to_load_path!(root); end

    # source://railties-6.1.7.10/lib/rails/application.rb:103
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties-6.1.7.10/lib/rails/application.rb:107
    def find_root(from); end

    # @private
    #
    # source://railties-6.1.7.10/lib/rails/application.rb:92
    def inherited(base); end

    # source://railties-6.1.7.10/lib/rails/application.rb:99
    def instance; end
  end
end

# Hack: We need to remove Rails' built in config.assets so we can
# do our own thing.
#
# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:22
class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:29
  def initialize(*_arg0); end

  # Returns the value of attribute add_autoload_paths_to_load_path.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def add_autoload_paths_to_load_path; end

  # Sets the attribute add_autoload_paths_to_load_path
  #
  # @param value the value to set the attribute add_autoload_paths_to_load_path to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def add_autoload_paths_to_load_path=(_arg0); end

  # Returns the value of attribute allow_concurrency.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def allow_concurrency; end

  # Sets the attribute allow_concurrency
  #
  # @param value the value to set the attribute allow_concurrency to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def allow_concurrency=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:342
  def annotations; end

  # Returns the value of attribute api_only.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:27
  def api_only; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:223
  def api_only=(value); end

  # Returns the value of attribute asset_host.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def asset_host; end

  # Sets the attribute asset_host
  #
  # @param value the value to set the attribute asset_host to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def asset_host=(_arg0); end

  # Returns the value of attribute autoflush_log.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def autoflush_log; end

  # Sets the attribute autoflush_log
  #
  # @param value the value to set the attribute autoflush_log to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def autoflush_log=(_arg0); end

  # Returns the value of attribute autoloader.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:27
  def autoloader; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:362
  def autoloader=(autoloader); end

  # Returns the value of attribute beginning_of_week.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def beginning_of_week; end

  # Sets the attribute beginning_of_week
  #
  # @param value the value to set the attribute beginning_of_week to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def beginning_of_week=(_arg0); end

  # Returns the value of attribute cache_classes.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def cache_classes; end

  # Sets the attribute cache_classes
  #
  # @param value the value to set the attribute cache_classes to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def cache_classes=(_arg0); end

  # Returns the value of attribute cache_store.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def cache_store; end

  # Sets the attribute cache_store
  #
  # @param value the value to set the attribute cache_store to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def cache_store=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:302
  def colorize_logging; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:306
  def colorize_logging=(val); end

  # Returns the value of attribute consider_all_requests_local.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def consider_all_requests_local; end

  # Sets the attribute consider_all_requests_local
  #
  # @param value the value to set the attribute consider_all_requests_local to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def consider_all_requests_local=(_arg0); end

  # Returns the value of attribute console.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def console; end

  # Sets the attribute console
  #
  # @param value the value to set the attribute console to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def console=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:346
  def content_security_policy(&block); end

  # Returns the value of attribute content_security_policy_nonce_directives.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def content_security_policy_nonce_directives; end

  # Sets the attribute content_security_policy_nonce_directives
  #
  # @param value the value to set the attribute content_security_policy_nonce_directives to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def content_security_policy_nonce_directives=(_arg0); end

  # Returns the value of attribute content_security_policy_nonce_generator.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def content_security_policy_nonce_generator; end

  # Sets the attribute content_security_policy_nonce_generator
  #
  # @param value the value to set the attribute content_security_policy_nonce_generator to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def content_security_policy_nonce_generator=(_arg0); end

  # Returns the value of attribute content_security_policy_report_only.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def content_security_policy_report_only; end

  # Sets the attribute content_security_policy_report_only
  #
  # @param value the value to set the attribute content_security_policy_report_only to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def content_security_policy_report_only=(_arg0); end

  # Returns the value of attribute credentials.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def credentials=(_arg0); end

  # Loads and returns the entire raw configuration of database from
  # values stored in <tt>config/database.yml</tt>.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:277
  def database_configuration; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:230
  def debug_exception_response_format; end

  # Sets the attribute debug_exception_response_format
  #
  # @param value the value to set the attribute debug_exception_response_format to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:234
  def debug_exception_response_format=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:374
  def default_log_file; end

  # Returns the value of attribute disable_sandbox.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def disable_sandbox; end

  # Sets the attribute disable_sandbox
  #
  # @param value the value to set the attribute disable_sandbox to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def disable_sandbox=(_arg0); end

  # Returns the value of attribute eager_load.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def eager_load; end

  # Sets the attribute eager_load
  #
  # @param value the value to set the attribute eager_load to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def eager_load=(_arg0); end

  # Returns the value of attribute enable_dependency_loading.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def enable_dependency_loading; end

  # Sets the attribute enable_dependency_loading
  #
  # @param value the value to set the attribute enable_dependency_loading to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def enable_dependency_loading=(_arg0); end

  # Returns the value of attribute encoding.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:27
  def encoding; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:215
  def encoding=(value); end

  # Returns the value of attribute exceptions_app.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def exceptions_app; end

  # Sets the attribute exceptions_app
  #
  # @param value the value to set the attribute exceptions_app to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def exceptions_app=(_arg0); end

  # Returns the value of attribute file_watcher.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def file_watcher; end

  # Sets the attribute file_watcher
  #
  # @param value the value to set the attribute file_watcher to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def file_watcher=(_arg0); end

  # Returns the value of attribute filter_parameters.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def filter_parameters; end

  # Sets the attribute filter_parameters
  #
  # @param value the value to set the attribute filter_parameters to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def filter_parameters=(_arg0); end

  # Returns the value of attribute filter_redirect.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def filter_redirect; end

  # Sets the attribute filter_redirect
  #
  # @param value the value to set the attribute filter_redirect to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def filter_redirect=(_arg0); end

  # Returns the value of attribute force_ssl.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def force_ssl; end

  # Sets the attribute force_ssl
  #
  # @param value the value to set the attribute force_ssl to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def force_ssl=(_arg0); end

  # Returns the value of attribute helpers_paths.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def helpers_paths; end

  # Sets the attribute helpers_paths
  #
  # @param value the value to set the attribute helpers_paths to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def helpers_paths=(_arg0); end

  # Returns the value of attribute host_authorization.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def host_authorization; end

  # Sets the attribute host_authorization
  #
  # @param value the value to set the attribute host_authorization to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def host_authorization=(_arg0); end

  # Returns the value of attribute hosts.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def hosts; end

  # Sets the attribute hosts
  #
  # @param value the value to set the attribute hosts to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def hosts=(_arg0); end

  # Load the database YAML without evaluating ERB. This allows us to
  # create the rake tasks for multiple databases without filling in the
  # configuration values or loading the environment. Do not use this
  # method.
  #
  # This uses a DummyERB custom compiler so YAML can ignore the ERB
  # tags and load the database.yml for the rake tasks.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:259
  def load_database_yaml; end

  # Loads default configurations. See {the result of the method for each version}[https://guides.rubyonrails.org/configuring.html#results-of-config-load-defaults].
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:85
  def load_defaults(target_version); end

  # Returns the value of attribute loaded_config_version.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:27
  def loaded_config_version; end

  # Returns the value of attribute log_formatter.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def log_formatter; end

  # Sets the attribute log_formatter
  #
  # @param value the value to set the attribute log_formatter to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def log_formatter=(_arg0); end

  # Returns the value of attribute log_level.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def log_level=(_arg0); end

  # Returns the value of attribute log_tags.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def log_tags; end

  # Sets the attribute log_tags
  #
  # @param value the value to set the attribute log_tags to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def log_tags=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def logger=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:236
  def paths; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:354
  def permissions_policy(&block); end

  # Returns the value of attribute public_file_server.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def public_file_server; end

  # Sets the attribute public_file_server
  #
  # @param value the value to set the attribute public_file_server to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def public_file_server=(_arg0); end

  # Returns the value of attribute railties_order.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def railties_order; end

  # Sets the attribute railties_order
  #
  # @param value the value to set the attribute railties_order to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def railties_order=(_arg0); end

  # Returns the value of attribute rake_eager_load.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def rake_eager_load; end

  # Sets the attribute rake_eager_load
  #
  # @param value the value to set the attribute rake_eager_load to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def rake_eager_load=(_arg0); end

  # Returns the value of attribute read_encrypted_secrets.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def read_encrypted_secrets; end

  # Sets the attribute read_encrypted_secrets
  #
  # @param value the value to set the attribute read_encrypted_secrets to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def read_encrypted_secrets=(_arg0); end

  # Returns the value of attribute relative_url_root.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def relative_url_root; end

  # Sets the attribute relative_url_root
  #
  # @param value the value to set the attribute relative_url_root to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def relative_url_root=(_arg0); end

  # Returns the value of attribute reload_classes_only_on_change.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def reload_classes_only_on_change; end

  # Sets the attribute reload_classes_only_on_change
  #
  # @param value the value to set the attribute reload_classes_only_on_change to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def reload_classes_only_on_change=(_arg0); end

  # Returns the value of attribute require_master_key.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def require_master_key; end

  # Sets the attribute require_master_key
  #
  # @param value the value to set the attribute require_master_key to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def require_master_key=(_arg0); end

  # Returns the value of attribute secret_key_base.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def secret_key_base; end

  # Sets the attribute secret_key_base
  #
  # @param value the value to set the attribute secret_key_base to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def secret_key_base=(_arg0); end

  # Returns the value of attribute session_options.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def session_options; end

  # Sets the attribute session_options
  #
  # @param value the value to set the attribute session_options to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def session_options=(_arg0); end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:311
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:338
  def session_store?; end

  # Returns the value of attribute ssl_options.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def ssl_options; end

  # Sets the attribute ssl_options
  #
  # @param value the value to set the attribute ssl_options to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def ssl_options=(_arg0); end

  # Returns the value of attribute time_zone.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def time_zone; end

  # Sets the attribute time_zone
  #
  # @param value the value to set the attribute time_zone to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def time_zone=(_arg0); end

  # Returns the value of attribute x.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def x; end

  # Sets the attribute x
  #
  # @param value the value to set the attribute x to.
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:14
  def x=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:423
  def credentials_available_for_current_env?; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:407
  def default_credentials_content_path; end

  # source://railties-6.1.7.10/lib/rails/application/configuration.rb:415
  def default_credentials_key_path; end
end

# source://railties-6.1.7.10/lib/rails/application.rb:125
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

# source://rails-html-sanitizer-1.6.2/lib/rails-html-sanitizer.rb:11
Rails::Html = Rails::HTML

# source://sprockets-rails-3.5.2/lib/sprockets/rails/asset_url_processor.rb:1
module Sprockets
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Exporting
  extend ::Sprockets::Processing
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::Transformers
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/asset_url_processor.rb:2
module Sprockets::Rails
  class << self
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/deprecator.rb:7
    def deprecator; end
  end
end

# Resolve assets referenced in CSS `url()` calls and replace them with the digested paths
#
# source://sprockets-rails-3.5.2/lib/sprockets/rails/asset_url_processor.rb:4
class Sprockets::Rails::AssetUrlProcessor
  class << self
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/asset_url_processor.rb:6
    def call(input); end
  end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/asset_url_processor.rb:5
Sprockets::Rails::AssetUrlProcessor::REGEX = T.let(T.unsafe(nil), Regexp)

# source://sprockets-rails-3.5.2/lib/sprockets/rails/context.rb:6
module Sprockets::Rails::Context
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/context.rb:16
  def compute_asset_path(path, options = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/context.rb:10
    def included(klass); end
  end

  module GeneratedClassMethods
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def config; end
    def config=(value); end
    def config?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
  end

  module GeneratedInstanceMethods
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def config; end
    def config=(value); end
    def config?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
  end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:8
module Sprockets::Rails::Helper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::Sprockets::Rails::Utils
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # Expand asset path to digested form.
  #
  # path    - String path
  # options - Hash options
  #
  # Returns String path or nil if no asset was found.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:112
  def asset_digest_path(path, options = T.unsafe(nil)); end

  # Experimental: Get integrity for asset path.
  #
  # path    - String path
  # options - Hash options
  #
  # Returns String integrity attribute or nil if no asset was found.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:124
  def asset_integrity(path, options = T.unsafe(nil)); end

  # Writes over the built in ActionView::Helpers::AssetUrlHelper#compute_asset_path
  # to use the asset pipeline.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:77
  def compute_asset_path(path, options = T.unsafe(nil)); end

  # Override javascript tag helper to provide debugging support.
  #
  # Eventually will be deprecated and replaced by source maps.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:135
  def javascript_include_tag(*sources); end

  # Resolve the asset path against the Sprockets manifest or environment.
  # Returns nil if it's an asset we don't know about.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:100
  def resolve_asset_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # Override stylesheet tag helper to provide debugging support.
  #
  # Eventually will be deprecated and replaced by source maps.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:164
  def stylesheet_link_tag(*sources); end

  protected

  # List of resolvers in `config.assets.resolve_with` order.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:249
  def asset_resolver_strategies; end

  # This is awkward: `integrity` is a boolean option indicating whether
  # we want to include or omit the subresource integrity hash, but the
  # options hash is also passed through as literal tag attributes.
  # That means we have to delete the shortcut boolean option so it
  # doesn't bleed into the tag attributes, but also check its value if
  # it's boolean-ish.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:197
  def compute_integrity?(options); end

  # Append ?body=1 if debug is on and we're on old Sprockets.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:257
  def legacy_debug_path(path, debug); end

  # Internal method to support multifile debugging. Will
  # eventually be removed w/ Sprockets 3.x.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:225
  def lookup_debug_asset(path, options = T.unsafe(nil)); end

  # compute_asset_extname is in AV::Helpers::AssetUrlHelper
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:234
  def path_with_extname(path, options); end

  # Enable split asset debugging. Eventually will be deprecated
  # and replaced by source maps in Sprockets 3.x.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:217
  def request_debug_assets?; end

  # Try each asset resolver and return the first non-nil result.
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:240
  def resolve_asset; end

  # Only serve integrity metadata for HTTPS requests:
  #   http://www.w3.org/TR/SRI/#non-secure-contexts-remain-non-secure
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:211
  def secure_subresource_integrity_context?; end

  class << self
    # @private
    #
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:60
    def extended(obj); end

    # @private
    #
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:43
    def included(klass); end
  end

  module GeneratedClassMethods
    def assets_environment; end
    def assets_environment=(value); end
    def assets_environment?; end
    def assets_manifest; end
    def assets_manifest=(value); end
    def assets_manifest?; end
    def assets_precompile; end
    def assets_precompile=(value); end
    def assets_precompile?; end
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def check_precompiled_asset; end
    def check_precompiled_asset=(value); end
    def check_precompiled_asset?; end
    def debug_assets; end
    def debug_assets=(value); end
    def debug_assets?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
    def precompiled_asset_checker; end
    def precompiled_asset_checker=(value); end
    def precompiled_asset_checker?; end
    def resolve_assets_with; end
    def resolve_assets_with=(value); end
    def resolve_assets_with?; end
    def unknown_asset_fallback; end
    def unknown_asset_fallback=(value); end
    def unknown_asset_fallback?; end
  end

  module GeneratedInstanceMethods
    def assets_environment; end
    def assets_environment=(value); end
    def assets_environment?; end
    def assets_manifest; end
    def assets_manifest=(value); end
    def assets_manifest?; end
    def assets_precompile; end
    def assets_precompile=(value); end
    def assets_precompile?; end
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def check_precompiled_asset; end
    def check_precompiled_asset=(value); end
    def check_precompiled_asset?; end
    def debug_assets; end
    def debug_assets=(value); end
    def debug_assets?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
    def precompiled_asset_checker; end
    def precompiled_asset_checker=(value); end
    def precompiled_asset_checker?; end
    def resolve_assets_with; end
    def resolve_assets_with=(value); end
    def resolve_assets_with?; end
    def unknown_asset_fallback; end
    def unknown_asset_fallback=(value); end
    def unknown_asset_fallback?; end
  end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:9
class Sprockets::Rails::Helper::AssetNotFound < ::StandardError; end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:10
class Sprockets::Rails::Helper::AssetNotPrecompiled < ::StandardError; end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:12
class Sprockets::Rails::Helper::AssetNotPrecompiledError < ::Sprockets::Rails::Helper::AssetNotPrecompiled
  include ::Sprockets::Rails::Utils

  # @return [AssetNotPrecompiledError] a new instance of AssetNotPrecompiledError
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:14
  def initialize(source); end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:35
Sprockets::Rails::Helper::VIEW_ACCESSORS = T.let(T.unsafe(nil), Array)

# Use a separate module since Helper is mixed in and we needn't pollute
# the class namespace with our internals.
#
# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:268
module Sprockets::Rails::HelperAssetResolvers
  class << self
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:269
    def [](name); end
  end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:314
class Sprockets::Rails::HelperAssetResolvers::Environment
  # @raise [ArgumentError]
  # @return [Environment] a new instance of Environment
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:315
  def initialize(view); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:322
  def asset_path(path, digest, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:335
  def digest_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:356
  def find_asset(path, options = T.unsafe(nil)); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:346
  def find_debug_asset(path); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:342
  def integrity(path); end

  private

  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:366
  def precompiled?(path); end

  # @raise [Helper::AssetNotPrecompiledError]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:370
  def raise_unless_precompiled_asset(path); end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:280
class Sprockets::Rails::HelperAssetResolvers::Manifest
  # @raise [ArgumentError]
  # @return [Manifest] a new instance of Manifest
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:281
  def initialize(view); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:286
  def asset_path(path, digest, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:292
  def digest_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:302
  def find_debug_asset(path); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:296
  def integrity(path); end

  private

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/helper.rb:307
  def metadata(path); end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/quiet_assets.rb:3
class Sprockets::Rails::LoggerSilenceError < ::StandardError; end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/quiet_assets.rb:5
class Sprockets::Rails::QuietAssets
  # @return [QuietAssets] a new instance of QuietAssets
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/quiet_assets.rb:6
  def initialize(app); end

  # source://sprockets-rails-3.5.2/lib/sprockets/rails/quiet_assets.rb:11
  def call(env); end

  private

  # @raise [LoggerSilenceError]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/quiet_assets.rb:22
  def raise_logger_silence_error; end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/route_wrapper.rb:3
module Sprockets::Rails::RouteWrapper
  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/route_wrapper.rb:8
  def internal?; end

  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/route_wrapper.rb:4
  def internal_assets_path?; end
end

# Rewrites source mapping urls with the digested paths and protect against semicolon appending with a dummy comment line
#
# source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:4
class Sprockets::Rails::SourcemappingUrlProcessor
  class << self
    # source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:8
    def call(input); end

    private

    # source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:25
    def combine_sourcemap_logical_path(sourcefile:, sourcemap:); end

    # source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:47
    def removed_sourcemap_comment(sourcemap_logical_path, filename:, env:); end

    # source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:33
    def resolved_sourcemap_comment(sourcemap_logical_path, context:); end

    # source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:37
    def sourcemap_asset_path(sourcemap_logical_path, context:); end
  end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/sourcemapping_url_processor.rb:5
Sprockets::Rails::SourcemappingUrlProcessor::REGEX = T.let(T.unsafe(nil), Regexp)

# source://sprockets-rails-3.5.2/lib/sprockets/rails/utils.rb:5
module Sprockets::Rails::Utils
  # @return [Boolean]
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/rails/utils.rb:6
  def using_sprockets4?; end
end

# source://sprockets-rails-3.5.2/lib/sprockets/rails/version.rb:3
Sprockets::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:60
class Sprockets::Railtie < ::Rails::Railtie
  include ::Sprockets::Rails::Utils

  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:182
  def build_environment(app, initialized = T.unsafe(nil)); end

  class << self
    # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:213
    def build_manifest(app); end
  end
end

# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:78
Sprockets::Railtie::LOOSE_APP_ASSETS = T.let(T.unsafe(nil), Proc)

# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:63
class Sprockets::Railtie::ManifestNeededError < ::StandardError
  # @return [ManifestNeededError] a new instance of ManifestNeededError
  #
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:64
  def initialize; end
end

# source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:83
class Sprockets::Railtie::OrderedOptions < ::ActiveSupport::OrderedOptions
  # source://sprockets-rails-3.5.2/lib/sprockets/railtie.rb:84
  def configure(&block); end
end

# source://sprockets-4.2.2/lib/sprockets/sass_processor.rb:312
Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

# source://sprockets-4.2.2/lib/sprockets/version.rb:3
Sprockets::VERSION = T.let(T.unsafe(nil), String)
