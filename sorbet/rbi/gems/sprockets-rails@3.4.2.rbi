# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sprockets-rails` gem.
# Please instead update this file by running `bin/tapioca gem sprockets-rails`.

# @private
#
# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:17
module Rails
  class << self
    # Returns the value of attribute app_class.
    #
    # source://railties-5.2.8.1/lib/rails.rb:38
    def app_class; end

    # Sets the attribute app_class
    #
    # @param value the value to set the attribute app_class to.
    #
    # source://railties-5.2.8.1/lib/rails.rb:38
    def app_class=(_arg0); end

    # source://railties-5.2.8.1/lib/rails.rb:39
    def application; end

    # Sets the attribute application
    #
    # @param value the value to set the attribute application to.
    #
    # source://railties-5.2.8.1/lib/rails.rb:37
    def application=(_arg0); end

    # source://railties-5.2.8.1/lib/rails.rb:50
    def backtrace_cleaner; end

    # Returns the value of attribute cache.
    #
    # source://railties-5.2.8.1/lib/rails.rb:38
    def cache; end

    # Sets the attribute cache
    #
    # @param value the value to set the attribute cache to.
    #
    # source://railties-5.2.8.1/lib/rails.rb:38
    def cache=(_arg0); end

    # The Configuration instance used to configure the Rails environment
    #
    # source://railties-5.2.8.1/lib/rails.rb:46
    def configuration; end

    # Returns the current Rails environment.
    #
    #   Rails.env # => "development"
    #   Rails.env.development? # => true
    #   Rails.env.production? # => false
    #
    # source://railties-5.2.8.1/lib/rails.rb:72
    def env; end

    # Sets the Rails environment.
    #
    #   Rails.env = "staging" # => "staging"
    #
    # source://railties-5.2.8.1/lib/rails.rb:79
    def env=(environment); end

    # Returns the version of the currently loaded Rails as a <tt>Gem::Version</tt>
    #
    # source://railties-5.2.8.1/lib/rails/gem_version.rb:5
    def gem_version; end

    # Returns all Rails groups for loading based on:
    #
    # * The Rails environment;
    # * The environment variable RAILS_GROUPS;
    # * The optional envs given as argument and the hash with group dependencies;
    #
    #   groups assets: [:development, :test]
    #
    #   # Returns
    #   # => [:default, "development", :assets] for Rails.env == "development"
    #   # => [:default, "production"]           for Rails.env == "production"
    #
    # source://railties-5.2.8.1/lib/rails.rb:94
    def groups(*groups); end

    # source://railties-5.2.8.1/lib/rails.rb:43
    def initialize!(*args, &block); end

    # source://railties-5.2.8.1/lib/rails.rb:43
    def initialized?(*args, &block); end

    # Returns the value of attribute logger.
    #
    # source://railties-5.2.8.1/lib/rails.rb:38
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://railties-5.2.8.1/lib/rails.rb:38
    def logger=(_arg0); end

    # Returns a Pathname object of the public folder of the current
    # Rails project, otherwise it returns +nil+ if there is no project:
    #
    #   Rails.public_path
    #     # => #<Pathname:/Users/someuser/some/path/project/public>
    #
    # source://railties-5.2.8.1/lib/rails.rb:110
    def public_path; end

    # Returns a Pathname object of the current Rails project,
    # otherwise it returns +nil+ if there is no project:
    #
    #   Rails.root
    #     # => #<Pathname:/Users/someuser/some/path/project>
    #
    # source://railties-5.2.8.1/lib/rails.rb:63
    def root; end

    # Returns the version of the currently loaded Rails as a string.
    #
    # source://railties-5.2.8.1/lib/rails/version.rb:7
    def version; end
  end
end

# An Engine with the responsibility of coordinating the whole boot process.
#
# == Initialization
#
# Rails::Application is responsible for executing all railties and engines
# initializers. It also executes some bootstrap initializers (check
# Rails::Application::Bootstrap) and finishing initializers, after all the others
# are executed (check Rails::Application::Finisher).
#
# == Configuration
#
# Besides providing the same configuration as Rails::Engine and Rails::Railtie,
# the application object has several specific configurations, for example
# "cache_classes", "consider_all_requests_local", "filter_parameters",
# "logger" and so forth.
#
# Check Rails::Application::Configuration to see them all.
#
# == Routes
#
# The application object is also responsible for holding the routes and reloading routes
# whenever the files change in development.
#
# == Middlewares
#
# The Application is also responsible for building the middleware stack.
#
# == Booting process
#
# The application is also responsible for setting up and executing the booting
# process. From the moment you require "config/application.rb" in your app,
# the booting process goes like this:
#
#   1)  require "config/boot.rb" to setup load paths
#   2)  require railties and engines
#   3)  Define Rails.application as "class MyApp::Application < Rails::Application"
#   4)  Run config.before_configuration callbacks
#   5)  Load config/environments/ENV.rb
#   6)  Run config.before_initialize callbacks
#   7)  Run Railtie#initializer defined by railties, engines and application.
#       One by one, each engine sets up its load paths, routes and runs its config/initializers/* files.
#   8)  Custom Railtie#initializers added by railties, engines and applications are executed
#   9)  Build the middleware stack and run to_prepare callbacks
#   10) Run config.before_eager_load and eager_load! if eager_load is true
#   11) Run config.after_initialize callbacks
#
# == Multiple Applications
#
# If you decide to define multiple applications, then the first application
# that is initialized will be set to +Rails.application+, unless you override
# it with a different application.
#
# To create a new application, you can instantiate a new instance of a class
# that has already been created:
#
#   class Application < Rails::Application
#   end
#
#   first_application  = Application.new
#   second_application = Application.new(config: first_application.config)
#
# In the above example, the configuration from the first application was used
# to initialize the second application. You can also use the +initialize_copy+
# on one of the applications to create a copy of the application which shares
# the configuration.
#
# If you decide to define Rake tasks, runners, or initializers in an
# application other than +Rails.application+, then you must run them manually.
#
# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:18
class Rails::Application < ::Rails::Engine
  # @return [Application] a new instance of Application
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:127
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # Called from asset helpers to alert you if you reference an asset URL that
  # isn't precompiled and hence won't be available in production.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:37
  def asset_precompiled?(logical_path); end

  # Returns Sprockets::Environment for app config.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:30
  def assets; end

  # Returns Sprockets::Environment for app config.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:30
  def assets=(_arg0); end

  # Returns Sprockets::Manifest for app config.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:33
  def assets_manifest; end

  # Returns Sprockets::Manifest for app config.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:33
  def assets_manifest=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/engine.rb:505
  def build_middleware_stack; end

  # source://railties-5.2.8.1/lib/rails/application.rb:372
  def config; end

  # source://railties-5.2.8.1/lib/rails/application.rb:376
  def config=(configuration); end

  # Convenience for loading config/foo.yml for the current Rails env.
  #
  # Example:
  #
  #     # config/exception_notification.yml:
  #     production:
  #       url: http://127.0.0.1:8080
  #       namespace: my_app_production
  #     development:
  #       url: http://localhost:3001
  #       namespace: my_app_development
  #
  #     # config/environments/production.rb
  #     Rails.application.configure do
  #       config.middleware.use ExceptionNotifier, config_for(:exception_notification)
  #     end
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:226
  def config_for(name, env: T.unsafe(nil)); end

  # Sends any console called in the instance of a new application up
  # to the +console+ method defined in Rails::Railtie.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:298
  def console(&blk); end

  # Decrypts the credentials hash as kept in +config/credentials.yml.enc+. This file is encrypted with
  # the Rails master key, which is either taken from <tt>ENV["RAILS_MASTER_KEY"]</tt> or from loading
  # +config/master.key+.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:441
  def credentials; end

  # source://railties-5.2.8.1/lib/rails/application.rb:122
  def default_url_options(*args, &block); end

  # source://railties-5.2.8.1/lib/rails/application.rb:122
  def default_url_options=(arg); end

  # Shorthand to decrypt any encrypted configurations or files.
  #
  # For any file added with <tt>bin/rails encrypted:edit</tt> call +read+ to decrypt
  # the file with the master key.
  # The master key is either stored in +config/master.key+ or <tt>ENV["RAILS_MASTER_KEY"]</tt>.
  #
  #   Rails.application.encrypted("config/mystery_man.txt.enc").read
  #   # => "We've met before, haven't we?"
  #
  # It's also possible to interpret encrypted YAML files with +config+.
  #
  #   Rails.application.encrypted("config/credentials.yml.enc").config
  #   # => { next_guys_line: "I don't think so. Where was it you think we met?" }
  #
  # Any top-level configs are also accessible directly on the return value:
  #
  #   Rails.application.encrypted("config/credentials.yml.enc").next_guys_line
  #   # => "I don't think so. Where was it you think we met?"
  #
  # The files or configs can also be encrypted with a custom key. To decrypt with
  # a key in the +ENV+, use:
  #
  #   Rails.application.encrypted("config/special_tokens.yml.enc", env_key: "SPECIAL_TOKENS")
  #
  # Or to decrypt with a file, that should be version control ignored, relative to +Rails.root+:
  #
  #   Rails.application.encrypted("config/special_tokens.yml.enc", key_path: "config/special_tokens.key")
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:472
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # Stores some of the Rails initial environment parameters which
  # will be used by middlewares and engines to configure themselves.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:247
  def env_config; end

  # Returns the value of attribute executor.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:120
  def executor; end

  # Sends any generators called in the instance of a new application up
  # to the +generators+ method defined in Rails::Railtie.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:304
  def generators(&blk); end

  # source://railties-5.2.8.1/lib/rails/application.rb:485
  def helpers_paths; end

  # Initialize the application passing the given group. By default, the
  # group is :default
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:359
  def initialize!(group = T.unsafe(nil)); end

  # Returns true if the application is initialized.
  #
  # @return [Boolean]
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:148
  def initialized?; end

  # Sends the initializers to the +initializer+ method defined in the
  # Rails::Initializable module. Each Rails::Application class has its own
  # set of initializers, as defined by the Initializable module.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:286
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties-5.2.8.1/lib/rails/application.rb:366
  def initializers; end

  # Sends the +isolate_namespace+ method up to the class method.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:309
  def isolate_namespace(mod); end

  # Returns the application's KeyGenerator
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:172
  def key_generator; end

  # Returns a message verifier object.
  #
  # This verifier can be used to generate and verify signed messages in the application.
  #
  # It is recommended not to use the same verifier for different things, so you can get different
  # verifiers passing the +verifier_name+ argument.
  #
  # ==== Parameters
  #
  # * +verifier_name+ - the name of the message verifier.
  #
  # ==== Examples
  #
  #     message = Rails.application.message_verifier('sensitive_data').generate('my sensible data')
  #     Rails.application.message_verifier('sensitive_data').verify(message)
  #     # => 'my sensible data'
  #
  # See the +ActiveSupport::MessageVerifier+ documentation for more information.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:203
  def message_verifier(verifier_name); end

  # Return an array of railties respecting the order they're loaded
  # and the order specified by the +railties_order+ config.
  #
  # While running initializers we need engines in reverse order here when
  # copying migrations from railties ; we need them in the order given by
  # +railties_order+.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:505
  def migration_railties; end

  # Lazy-load the precompile list so we don't cause asset compilation at app
  # boot time, but ensure we cache the list so we don't recompute it for each
  # request or test case.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:51
  def precompiled_assets(clear_cache = T.unsafe(nil)); end

  # If you try to define a set of Rake tasks on the instance, these will get
  # passed up to the Rake tasks defined on the application's class.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:279
  def rake_tasks(&block); end

  # Reload application routes regardless if they changed or not.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:167
  def reload_routes!; end

  # Returns the value of attribute reloader.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:120
  def reloader; end

  # Returns the value of attribute reloaders.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:120
  def reloaders; end

  # source://railties-5.2.8.1/lib/rails/application.rb:335
  def require_environment!; end

  # source://railties-5.2.8.1/lib/rails/application.rb:340
  def routes_reloader; end

  # source://railties-5.2.8.1/lib/rails/application.rb:152
  def run_load_hooks!; end

  # Sends any runner called in the instance of a new application up
  # to the +runner+ method defined in Rails::Railtie.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:292
  def runner(&blk); end

  # Returns the value of attribute sandbox.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:118
  def sandbox; end

  # Sets the attribute sandbox
  #
  # @param value the value to set the attribute sandbox to.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:118
  def sandbox=(_arg0); end

  # Returns the value of attribute sandbox.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:118
  def sandbox?; end

  # The secret_key_base is used as the input secret to the application's key generator, which in turn
  # is used to create all MessageVerifiers/MessageEncryptors, including the ones that sign and encrypt cookies.
  #
  # In test and development, this is simply derived as a MD5 hash of the application's name.
  #
  # In all other environments, we look for it first in ENV["SECRET_KEY_BASE"],
  # then credentials.secret_key_base, and finally secrets.secret_key_base. For most applications,
  # the correct place to store it is in the encrypted credentials file.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:428
  def secret_key_base; end

  # Returns secrets added to config/secrets.yml.
  #
  # Example:
  #
  #     development:
  #       secret_key_base: 836fa3665997a860728bcb9e9a1e704d427cfc920e79d847d79c8a9a907b9e965defa4154b2b86bdec6930adbe33f21364523a6f6ce363865724549fdfc08553
  #     test:
  #       secret_key_base: 5a37811464e7d378488b0f073e2193b093682e4e21f5d6f3ae0a4e1781e61a351fdc878a843424e81c73fb484a40d23f92c8dafac4870e74ede6e5e174423010
  #     production:
  #       secret_key_base: <%= ENV["SECRET_KEY_BASE"] %>
  #       namespace: my_app_production
  #
  # +Rails.application.secrets.namespace+ returns +my_app_production+ in the
  # production environment.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:394
  def secrets; end

  # source://railties-5.2.8.1/lib/rails/application.rb:416
  def secrets=(secrets); end

  # source://railties-5.2.8.1/lib/rails/application.rb:481
  def to_app; end

  # Returns an array of file paths appended with a hash of
  # directories-extensions suitable for ActiveSupport::FileUpdateChecker
  # API.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:347
  def watchable_args; end

  protected

  # source://railties-5.2.8.1/lib/rails/application.rb:574
  def default_middleware_stack; end

  # Returns the ordered railties for this application considering railties_order.
  #
  # source://railties-5.2.8.1/lib/rails/application.rb:540
  def ordered_railties; end

  # source://railties-5.2.8.1/lib/rails/application.rb:562
  def railties_initializers(current); end

  # source://railties-5.2.8.1/lib/rails/application.rb:534
  def run_console_blocks(app); end

  # source://railties-5.2.8.1/lib/rails/application.rb:524
  def run_generators_blocks(app); end

  # source://railties-5.2.8.1/lib/rails/application.rb:529
  def run_runner_blocks(app); end

  # source://railties-5.2.8.1/lib/rails/application.rb:513
  def run_tasks_blocks(app); end

  # source://railties-5.2.8.1/lib/rails/application.rb:579
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties-5.2.8.1/lib/rails/application.rb:614
  def build_middleware; end

  # source://railties-5.2.8.1/lib/rails/application.rb:607
  def build_request(env); end

  # source://railties-5.2.8.1/lib/rails/application.rb:591
  def generate_development_secret; end

  class << self
    # This method is called just after an application inherits from Rails::Application,
    # allowing the developer to load classes in lib and use them during application
    # configuration.
    #
    #   class MyApplication < Rails::Application
    #     require "my_backend" # in lib/my_backend
    #     config.i18n.backend = MyBackend
    #   end
    #
    # Notice this method takes into consideration the default root path. So if you
    # are changing config.root inside your application definition or having a custom
    # Rails application, you will need to add lib to $LOAD_PATH on your own in case
    # you need to load files in lib/ during the application configuration as well.
    #
    # source://railties-5.2.8.1/lib/rails/application.rb:328
    def add_lib_to_load_path!(root); end

    # source://railties-5.2.8.1/lib/rails/application.rb:102
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties-5.2.8.1/lib/rails/application.rb:106
    def find_root(from); end

    # @private
    #
    # source://railties-5.2.8.1/lib/rails/application.rb:91
    def inherited(base); end

    # source://railties-5.2.8.1/lib/rails/application.rb:98
    def instance; end
  end
end

# Hack: We need to remove Rails' built in config.assets so we can
# do our own thing.
#
# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:21
class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:24
  def initialize(*_arg0); end

  # Returns the value of attribute allow_concurrency.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def allow_concurrency; end

  # Sets the attribute allow_concurrency
  #
  # @param value the value to set the attribute allow_concurrency to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def allow_concurrency=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:237
  def annotations; end

  # Returns the value of attribute api_only.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:22
  def api_only; end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:132
  def api_only=(value); end

  # Returns the value of attribute asset_host.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def asset_host; end

  # Sets the attribute asset_host
  #
  # @param value the value to set the attribute asset_host to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def asset_host=(_arg0); end

  # Returns the value of attribute autoflush_log.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def autoflush_log; end

  # Sets the attribute autoflush_log
  #
  # @param value the value to set the attribute autoflush_log to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def autoflush_log=(_arg0); end

  # Returns the value of attribute beginning_of_week.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def beginning_of_week; end

  # Sets the attribute beginning_of_week
  #
  # @param value the value to set the attribute beginning_of_week to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def beginning_of_week=(_arg0); end

  # Returns the value of attribute cache_classes.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def cache_classes; end

  # Sets the attribute cache_classes
  #
  # @param value the value to set the attribute cache_classes to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def cache_classes=(_arg0); end

  # Returns the value of attribute cache_store.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def cache_store; end

  # Sets the attribute cache_store
  #
  # @param value the value to set the attribute cache_store to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def cache_store=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:197
  def colorize_logging; end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:201
  def colorize_logging=(val); end

  # Returns the value of attribute consider_all_requests_local.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def consider_all_requests_local; end

  # Sets the attribute consider_all_requests_local
  #
  # @param value the value to set the attribute consider_all_requests_local to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def consider_all_requests_local=(_arg0); end

  # Returns the value of attribute console.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def console; end

  # Sets the attribute console
  #
  # @param value the value to set the attribute console to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def console=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:241
  def content_security_policy(&block); end

  # Returns the value of attribute content_security_policy_nonce_generator.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def content_security_policy_nonce_generator; end

  # Sets the attribute content_security_policy_nonce_generator
  #
  # @param value the value to set the attribute content_security_policy_nonce_generator to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def content_security_policy_nonce_generator=(_arg0); end

  # Returns the value of attribute content_security_policy_report_only.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def content_security_policy_report_only; end

  # Sets the attribute content_security_policy_report_only
  #
  # @param value the value to set the attribute content_security_policy_report_only to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def content_security_policy_report_only=(_arg0); end

  # Loads and returns the entire raw configuration of database from
  # values stored in <tt>config/database.yml</tt>.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:165
  def database_configuration; end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:139
  def debug_exception_response_format; end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:143
  def debug_exception_response_format=(value); end

  # Returns the value of attribute eager_load.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def eager_load; end

  # Sets the attribute eager_load
  #
  # @param value the value to set the attribute eager_load to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def eager_load=(_arg0); end

  # Returns the value of attribute enable_dependency_loading.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def enable_dependency_loading; end

  # Sets the attribute enable_dependency_loading
  #
  # @param value the value to set the attribute enable_dependency_loading to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def enable_dependency_loading=(_arg0); end

  # Returns the value of attribute encoding.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:22
  def encoding; end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:124
  def encoding=(value); end

  # Returns the value of attribute exceptions_app.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def exceptions_app; end

  # Sets the attribute exceptions_app
  #
  # @param value the value to set the attribute exceptions_app to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def exceptions_app=(_arg0); end

  # Returns the value of attribute file_watcher.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def file_watcher; end

  # Sets the attribute file_watcher
  #
  # @param value the value to set the attribute file_watcher to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def file_watcher=(_arg0); end

  # Returns the value of attribute filter_parameters.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def filter_parameters; end

  # Sets the attribute filter_parameters
  #
  # @param value the value to set the attribute filter_parameters to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def filter_parameters=(_arg0); end

  # Returns the value of attribute filter_redirect.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def filter_redirect; end

  # Sets the attribute filter_redirect
  #
  # @param value the value to set the attribute filter_redirect to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def filter_redirect=(_arg0); end

  # Returns the value of attribute force_ssl.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def force_ssl; end

  # Sets the attribute force_ssl
  #
  # @param value the value to set the attribute force_ssl to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def force_ssl=(_arg0); end

  # Returns the value of attribute helpers_paths.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def helpers_paths; end

  # Sets the attribute helpers_paths
  #
  # @param value the value to set the attribute helpers_paths to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def helpers_paths=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:65
  def load_defaults(target_version); end

  # Returns the value of attribute loaded_config_version.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:22
  def loaded_config_version; end

  # Returns the value of attribute log_formatter.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def log_formatter; end

  # Sets the attribute log_formatter
  #
  # @param value the value to set the attribute log_formatter to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def log_formatter=(_arg0); end

  # Returns the value of attribute log_level.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def log_level=(_arg0); end

  # Returns the value of attribute log_tags.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def log_tags; end

  # Sets the attribute log_tags
  #
  # @param value the value to set the attribute log_tags to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def log_tags=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def logger=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:147
  def paths; end

  # Returns the value of attribute public_file_server.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def public_file_server; end

  # Sets the attribute public_file_server
  #
  # @param value the value to set the attribute public_file_server to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def public_file_server=(_arg0); end

  # Returns the value of attribute railties_order.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def railties_order; end

  # Sets the attribute railties_order
  #
  # @param value the value to set the attribute railties_order to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def railties_order=(_arg0); end

  # Returns the value of attribute read_encrypted_secrets.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def read_encrypted_secrets; end

  # Sets the attribute read_encrypted_secrets
  #
  # @param value the value to set the attribute read_encrypted_secrets to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def read_encrypted_secrets=(_arg0); end

  # Returns the value of attribute relative_url_root.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def relative_url_root; end

  # Sets the attribute relative_url_root
  #
  # @param value the value to set the attribute relative_url_root to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def relative_url_root=(_arg0); end

  # Returns the value of attribute reload_classes_only_on_change.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def reload_classes_only_on_change; end

  # Sets the attribute reload_classes_only_on_change
  #
  # @param value the value to set the attribute reload_classes_only_on_change to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def reload_classes_only_on_change=(_arg0); end

  # Returns the value of attribute require_master_key.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def require_master_key; end

  # Sets the attribute require_master_key
  #
  # @param value the value to set the attribute require_master_key to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def require_master_key=(_arg0); end

  # Returns the value of attribute secret_key_base.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def secret_key_base; end

  # Sets the attribute secret_key_base
  #
  # @param value the value to set the attribute secret_key_base to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def secret_key_base=(_arg0); end

  # Returns the value of attribute secret_token.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def secret_token; end

  # Sets the attribute secret_token
  #
  # @param value the value to set the attribute secret_token to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def secret_token=(_arg0); end

  # Returns the value of attribute session_options.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def session_options; end

  # Sets the attribute session_options
  #
  # @param value the value to set the attribute session_options to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def session_options=(_arg0); end

  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:206
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:233
  def session_store?; end

  # Returns the value of attribute ssl_options.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def ssl_options; end

  # Sets the attribute ssl_options
  #
  # @param value the value to set the attribute ssl_options to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def ssl_options=(_arg0); end

  # Returns the value of attribute time_zone.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def time_zone; end

  # Sets the attribute time_zone
  #
  # @param value the value to set the attribute time_zone to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def time_zone=(_arg0); end

  # Returns the value of attribute x.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def x; end

  # Sets the attribute x
  #
  # @param value the value to set the attribute x to.
  #
  # source://railties-5.2.8.1/lib/rails/application/configuration.rb:11
  def x=(_arg0); end
end

# source://railties-5.2.8.1/lib/rails/application.rb:124
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

# <tt>Rails::Engine</tt> allows you to wrap a specific Rails application or subset of
# functionality and share it with other applications or within a larger packaged application.
# Every <tt>Rails::Application</tt> is just an engine, which allows for simple
# feature and application sharing.
#
# Any <tt>Rails::Engine</tt> is also a <tt>Rails::Railtie</tt>, so the same
# methods (like <tt>rake_tasks</tt> and +generators+) and configuration
# options that are available in railties can also be used in engines.
#
# == Creating an Engine
#
# If you want a gem to behave as an engine, you have to specify an +Engine+
# for it somewhere inside your plugin's +lib+ folder (similar to how we
# specify a +Railtie+):
#
#   # lib/my_engine.rb
#   module MyEngine
#     class Engine < Rails::Engine
#     end
#   end
#
# Then ensure that this file is loaded at the top of your <tt>config/application.rb</tt>
# (or in your +Gemfile+) and it will automatically load models, controllers and helpers
# inside +app+, load routes at <tt>config/routes.rb</tt>, load locales at
# <tt>config/locales/*</tt>, and load tasks at <tt>lib/tasks/*</tt>.
#
# == Configuration
#
# Besides the +Railtie+ configuration which is shared across the application, in a
# <tt>Rails::Engine</tt> you can access <tt>autoload_paths</tt>, <tt>eager_load_paths</tt>
# and <tt>autoload_once_paths</tt>, which, differently from a <tt>Railtie</tt>, are scoped to
# the current engine.
#
#   class MyEngine < Rails::Engine
#     # Add a load path for this specific Engine
#     config.autoload_paths << File.expand_path("lib/some/path", __dir__)
#
#     initializer "my_engine.add_middleware" do |app|
#       app.middleware.use MyEngine::Middleware
#     end
#   end
#
# == Generators
#
# You can set up generators for engines with <tt>config.generators</tt> method:
#
#   class MyEngine < Rails::Engine
#     config.generators do |g|
#       g.orm             :active_record
#       g.template_engine :erb
#       g.test_framework  :test_unit
#     end
#   end
#
# You can also set generators for an application by using <tt>config.app_generators</tt>:
#
#   class MyEngine < Rails::Engine
#     # note that you can also pass block to app_generators in the same way you
#     # can pass it to generators method
#     config.app_generators.orm :datamapper
#   end
#
# == Paths
#
# Applications and engines have flexible path configuration, meaning that you
# are not required to place your controllers at <tt>app/controllers</tt>, but
# in any place which you find convenient.
#
# For example, let's suppose you want to place your controllers in <tt>lib/controllers</tt>.
# You can set that as an option:
#
#   class MyEngine < Rails::Engine
#     paths["app/controllers"] = "lib/controllers"
#   end
#
# You can also have your controllers loaded from both <tt>app/controllers</tt> and
# <tt>lib/controllers</tt>:
#
#   class MyEngine < Rails::Engine
#     paths["app/controllers"] << "lib/controllers"
#   end
#
# The available paths in an engine are:
#
#   class MyEngine < Rails::Engine
#     paths["app"]                 # => ["app"]
#     paths["app/controllers"]     # => ["app/controllers"]
#     paths["app/helpers"]         # => ["app/helpers"]
#     paths["app/models"]          # => ["app/models"]
#     paths["app/views"]           # => ["app/views"]
#     paths["lib"]                 # => ["lib"]
#     paths["lib/tasks"]           # => ["lib/tasks"]
#     paths["config"]              # => ["config"]
#     paths["config/initializers"] # => ["config/initializers"]
#     paths["config/locales"]      # => ["config/locales"]
#     paths["config/routes.rb"]    # => ["config/routes.rb"]
#   end
#
# The <tt>Application</tt> class adds a couple more paths to this set. And as in your
# <tt>Application</tt>, all folders under +app+ are automatically added to the load path.
# If you have an <tt>app/services</tt> folder for example, it will be added by default.
#
# == Endpoint
#
# An engine can also be a Rack application. It can be useful if you have a Rack application that
# you would like to wrap with +Engine+ and provide with some of the +Engine+'s features.
#
# To do that, use the +endpoint+ method:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       endpoint MyRackApplication
#     end
#   end
#
# Now you can mount your engine in application's routes just like that:
#
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/engine"
#   end
#
# == Middleware stack
#
# As an engine can now be a Rack endpoint, it can also have a middleware
# stack. The usage is exactly the same as in <tt>Application</tt>:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       middleware.use SomeMiddleware
#     end
#   end
#
# == Routes
#
# If you don't specify an endpoint, routes will be used as the default
# endpoint. You can use them just like you use an application's routes:
#
#   # ENGINE/config/routes.rb
#   MyEngine::Engine.routes.draw do
#     get "/" => "posts#index"
#   end
#
# == Mount priority
#
# Note that now there can be more than one router in your application, and it's better to avoid
# passing requests through many routers. Consider this situation:
#
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/blog"
#     get "/blog/omg" => "main#omg"
#   end
#
# +MyEngine+ is mounted at <tt>/blog</tt>, and <tt>/blog/omg</tt> points to application's
# controller. In such a situation, requests to <tt>/blog/omg</tt> will go through +MyEngine+,
# and if there is no such route in +Engine+'s routes, it will be dispatched to <tt>main#omg</tt>.
# It's much better to swap that:
#
#   Rails.application.routes.draw do
#     get "/blog/omg" => "main#omg"
#     mount MyEngine::Engine => "/blog"
#   end
#
# Now, +Engine+ will get only requests that were not handled by +Application+.
#
# == Engine name
#
# There are some places where an Engine's name is used:
#
# * routes: when you mount an Engine with <tt>mount(MyEngine::Engine => '/my_engine')</tt>,
#   it's used as default <tt>:as</tt> option
# * rake task for installing migrations <tt>my_engine:install:migrations</tt>
#
# Engine name is set by default based on class name. For <tt>MyEngine::Engine</tt> it will be
# <tt>my_engine_engine</tt>. You can change it manually using the <tt>engine_name</tt> method:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       engine_name "my_engine"
#     end
#   end
#
# == Isolated Engine
#
# Normally when you create controllers, helpers and models inside an engine, they are treated
# as if they were created inside the application itself. This means that all helpers and
# named routes from the application will be available to your engine's controllers as well.
#
# However, sometimes you want to isolate your engine from the application, especially if your engine
# has its own router. To do that, you simply need to call +isolate_namespace+. This method requires
# you to pass a module where all your controllers, helpers and models should be nested to:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       isolate_namespace MyEngine
#     end
#   end
#
# With such an engine, everything that is inside the +MyEngine+ module will be isolated from
# the application.
#
# Consider this controller:
#
#   module MyEngine
#     class FooController < ActionController::Base
#     end
#   end
#
# If the +MyEngine+ engine is marked as isolated, +FooController+ only has
# access to helpers from +MyEngine+, and <tt>url_helpers</tt> from
# <tt>MyEngine::Engine.routes</tt>.
#
# The next thing that changes in isolated engines is the behavior of routes.
# Normally, when you namespace your controllers, you also need to namespace
# the related routes. With an isolated engine, the engine's namespace is
# automatically applied, so you don't need to specify it explicitly in your
# routes:
#
#   MyEngine::Engine.routes.draw do
#     resources :articles
#   end
#
# If +MyEngine+ is isolated, The routes above will point to
# <tt>MyEngine::ArticlesController</tt>. You also don't need to use longer
# url helpers like +my_engine_articles_path+. Instead, you should simply use
# +articles_path+, like you would do with your main application.
#
# To make this behavior consistent with other parts of the framework,
# isolated engines also have an effect on <tt>ActiveModel::Naming</tt>. In a
# normal Rails app, when you use a namespaced model such as
# <tt>Namespace::Article</tt>, <tt>ActiveModel::Naming</tt> will generate
# names with the prefix "namespace". In an isolated engine, the prefix will
# be omitted in url helpers and form fields, for convenience.
#
#   polymorphic_url(MyEngine::Article.new)
#   # => "articles_path" # not "my_engine_articles_path"
#
#   form_for(MyEngine::Article.new) do
#     text_field :title # => <input type="text" name="article[title]" id="article_title" />
#   end
#
# Additionally, an isolated engine will set its own name according to its
# namespace, so <tt>MyEngine::Engine.engine_name</tt> will return
# "my_engine". It will also set +MyEngine.table_name_prefix+ to "my_engine_",
# meaning for example that <tt>MyEngine::Article</tt> will use the
# +my_engine_articles+ database table by default.
#
# == Using Engine's routes outside Engine
#
# Since you can now mount an engine inside application's routes, you do not have direct access to +Engine+'s
# <tt>url_helpers</tt> inside +Application+. When you mount an engine in an application's routes, a special helper is
# created to allow you to do that. Consider such a scenario:
#
#   # config/routes.rb
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/my_engine", as: "my_engine"
#     get "/foo" => "foo#index"
#   end
#
# Now, you can use the <tt>my_engine</tt> helper inside your application:
#
#   class FooController < ApplicationController
#     def index
#       my_engine.root_url # => /my_engine/
#     end
#   end
#
# There is also a <tt>main_app</tt> helper that gives you access to application's routes inside Engine:
#
#   module MyEngine
#     class BarController
#       def index
#         main_app.foo_path # => /foo
#       end
#     end
#   end
#
# Note that the <tt>:as</tt> option given to mount takes the <tt>engine_name</tt> as default, so most of the time
# you can simply omit it.
#
# Finally, if you want to generate a url to an engine's route using
# <tt>polymorphic_url</tt>, you also need to pass the engine helper. Let's
# say that you want to create a form pointing to one of the engine's routes.
# All you need to do is pass the helper as the first element in array with
# attributes for url:
#
#   form_for([my_engine, @user])
#
# This code will use <tt>my_engine.user_path(@user)</tt> to generate the proper route.
#
# == Isolated engine's helpers
#
# Sometimes you may want to isolate engine, but use helpers that are defined for it.
# If you want to share just a few specific helpers you can add them to application's
# helpers in ApplicationController:
#
#   class ApplicationController < ActionController::Base
#     helper MyEngine::SharedEngineHelper
#   end
#
# If you want to include all of the engine's helpers, you can use the #helper method on an engine's
# instance:
#
#   class ApplicationController < ActionController::Base
#     helper MyEngine::Engine.helpers
#   end
#
# It will include all of the helpers from engine's directory. Take into account that this does
# not include helpers defined in controllers with helper_method or other similar solutions,
# only helpers defined in the helpers directory will be included.
#
# == Migrations & seed data
#
# Engines can have their own migrations. The default path for migrations is exactly the same
# as in application: <tt>db/migrate</tt>
#
# To use engine's migrations in application you can use the rake task below, which copies them to
# application's dir:
#
#   rake ENGINE_NAME:install:migrations
#
# Note that some of the migrations may be skipped if a migration with the same name already exists
# in application. In such a situation you must decide whether to leave that migration or rename the
# migration in the application and rerun copying migrations.
#
# If your engine has migrations, you may also want to prepare data for the database in
# the <tt>db/seeds.rb</tt> file. You can load that data using the <tt>load_seed</tt> method, e.g.
#
#   MyEngine::Engine.load_seed
#
# == Loading priority
#
# In order to change engine's priority you can use +config.railties_order+ in the main application.
# It will affect the priority of loading views, helpers, assets, and all the other files
# related to engine or application.
#
#   # load Blog::Engine with highest priority, followed by application and other railties
#   config.railties_order = [Blog::Engine, :main_app, :all]
#
# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:58
class Rails::Engine < ::Rails::Railtie
  # @return [Engine] a new instance of Engine
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:427
  def initialize; end

  # Returns the underlying Rack application for this engine.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:505
  def app; end

  # Define the Rack API for this engine.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:522
  def call(env); end

  # Define the configuration object for the engine.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:541
  def config; end

  # Eager load the application by loading all ruby
  # files inside eager_load paths.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:474
  def eager_load!; end

  # Returns the endpoint for this engine. If none is registered,
  # defaults to an ActionDispatch::Routing::RouteSet.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:517
  def endpoint; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:425
  def engine_name(*args, &block); end

  # Defines additional Rack env configuration that is added on each call.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:528
  def env_config; end

  # Returns a module with all the helpers defined for the engine.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:488
  def helpers; end

  # Returns all registered helpers paths.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:500
  def helpers_paths; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:425
  def isolated?(*args, &block); end

  # Load console and invoke the registered hooks.
  # Check <tt>Rails::Railtie.console</tt> for more info.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:441
  def load_console(app = T.unsafe(nil)); end

  # Load Rails generators and invoke the registered hooks.
  # Check <tt>Rails::Railtie.generators</tt> for more info.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:465
  def load_generators(app = T.unsafe(nil)); end

  # Load Rails runner and invoke the registered hooks.
  # Check <tt>Rails::Railtie.runner</tt> for more info.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:450
  def load_runner(app = T.unsafe(nil)); end

  # Load data from db/seeds.rb file. It can be used in to load engines'
  # seeds, e.g.:
  #
  # Blog::Engine.load_seed
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:549
  def load_seed; end

  # Load Rake, railties tasks and invoke the registered hooks.
  # Check <tt>Rails::Railtie.rake_tasks</tt> for more info.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:457
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties-5.2.8.1/lib/rails/engine.rb:424
  def middleware(*args, &block); end

  # source://railties-5.2.8.1/lib/rails/engine.rb:424
  def paths(*args, &block); end

  # source://railties-5.2.8.1/lib/rails/engine.rb:483
  def railties; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:424
  def root(*args, &block); end

  # Defines the routes for this engine. If a block is given to
  # routes, it is appended to the engine.
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:534
  def routes(&block); end

  # @return [Boolean]
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:648
  def routes?; end

  protected

  # source://railties-5.2.8.1/lib/rails/engine.rb:654
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties-5.2.8.1/lib/rails/engine.rb:699
  def _all_autoload_once_paths; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:703
  def _all_autoload_paths; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:707
  def _all_load_paths; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:719
  def build_middleware; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:711
  def build_request(env); end

  # source://railties-5.2.8.1/lib/rails/engine.rb:695
  def default_middleware_stack; end

  # @return [Boolean]
  #
  # source://railties-5.2.8.1/lib/rails/engine.rb:679
  def has_migrations?; end

  # source://railties-5.2.8.1/lib/rails/engine.rb:661
  def load_config_initializer(initializer); end

  # source://railties-5.2.8.1/lib/rails/engine.rb:667
  def with_inline_jobs; end

  class << self
    # Returns the value of attribute called_from.
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:351
    def called_from; end

    # Sets the attribute called_from
    #
    # @param value the value to set the attribute called_from to.
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:351
    def called_from=(_arg0); end

    # source://railties-5.2.8.1/lib/rails/engine.rb:356
    def eager_load!(*args, &block); end

    # source://railties-5.2.8.1/lib/rails/engine.rb:376
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties-5.2.8.1/lib/rails/railtie.rb:159
    def engine_name(name = T.unsafe(nil)); end

    # Finds engine with given path.
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:414
    def find(path); end

    # source://railties-5.2.8.1/lib/rails/engine.rb:372
    def find_root(from); end

    # source://railties-5.2.8.1/lib/rails/engine.rb:683
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # @private
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:358
    def inherited(base); end

    # source://railties-5.2.8.1/lib/rails/engine.rb:382
    def isolate_namespace(mod); end

    # Returns the value of attribute isolated.
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:351
    def isolated; end

    # Sets the attribute isolated
    #
    # @param value the value to set the attribute isolated to.
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:351
    def isolated=(_arg0); end

    # Returns the value of attribute isolated.
    #
    # source://railties-5.2.8.1/lib/rails/engine.rb:351
    def isolated?; end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/asset_url_processor.rb:1
module Sprockets
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Processing
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::Transformers
  extend ::Sprockets::Engines
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
end

# source://sprockets-3.7.2/lib/sprockets/legacy.rb:18
Sprockets::Index = Sprockets::CachedEnvironment

# source://sprockets-rails-3.4.2/lib/sprockets/rails/asset_url_processor.rb:2
module Sprockets::Rails; end

# Resolve assets referenced in CSS `url()` calls and replace them with the digested paths
#
# source://sprockets-rails-3.4.2/lib/sprockets/rails/asset_url_processor.rb:4
class Sprockets::Rails::AssetUrlProcessor
  class << self
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/asset_url_processor.rb:6
    def call(input); end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/asset_url_processor.rb:5
Sprockets::Rails::AssetUrlProcessor::REGEX = T.let(T.unsafe(nil), Regexp)

# source://sprockets-rails-3.4.2/lib/sprockets/rails/context.rb:6
module Sprockets::Rails::Context
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/context.rb:16
  def compute_asset_path(path, options = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/context.rb:10
    def included(klass); end
  end

  module GeneratedClassMethods
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def config; end
    def config=(value); end
    def config?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
  end

  module GeneratedInstanceMethods
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def config; end
    def config=(value); end
    def config?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:8
module Sprockets::Rails::Helper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::Sprockets::Rails::Utils
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # Expand asset path to digested form.
  #
  # path    - String path
  # options - Hash options
  #
  # Returns String path or nil if no asset was found.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:113
  def asset_digest_path(path, options = T.unsafe(nil)); end

  # Experimental: Get integrity for asset path.
  #
  # path    - String path
  # options - Hash options
  #
  # Returns String integrity attribute or nil if no asset was found.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:125
  def asset_integrity(path, options = T.unsafe(nil)); end

  # Writes over the built in ActionView::Helpers::AssetUrlHelper#compute_asset_path
  # to use the asset pipeline.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:77
  def compute_asset_path(path, options = T.unsafe(nil)); end

  # Override javascript tag helper to provide debugging support.
  #
  # Eventually will be deprecated and replaced by source maps.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:136
  def javascript_include_tag(*sources); end

  # Resolve the asset path against the Sprockets manifest or environment.
  # Returns nil if it's an asset we don't know about.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:101
  def resolve_asset_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # Override stylesheet tag helper to provide debugging support.
  #
  # Eventually will be deprecated and replaced by source maps.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:165
  def stylesheet_link_tag(*sources); end

  protected

  # List of resolvers in `config.assets.resolve_with` order.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:250
  def asset_resolver_strategies; end

  # This is awkward: `integrity` is a boolean option indicating whether
  # we want to include or omit the subresource integrity hash, but the
  # options hash is also passed through as literal tag attributes.
  # That means we have to delete the shortcut boolean option so it
  # doesn't bleed into the tag attributes, but also check its value if
  # it's boolean-ish.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:198
  def compute_integrity?(options); end

  # Append ?body=1 if debug is on and we're on old Sprockets.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:258
  def legacy_debug_path(path, debug); end

  # Internal method to support multifile debugging. Will
  # eventually be removed w/ Sprockets 3.x.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:226
  def lookup_debug_asset(path, options = T.unsafe(nil)); end

  # compute_asset_extname is in AV::Helpers::AssetUrlHelper
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:235
  def path_with_extname(path, options); end

  # Enable split asset debugging. Eventually will be deprecated
  # and replaced by source maps in Sprockets 3.x.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:218
  def request_debug_assets?; end

  # Try each asset resolver and return the first non-nil result.
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:241
  def resolve_asset; end

  # Only serve integrity metadata for HTTPS requests:
  #   http://www.w3.org/TR/SRI/#non-secure-contexts-remain-non-secure
  #
  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:212
  def secure_subresource_integrity_context?; end

  class << self
    # @private
    #
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:60
    def extended(obj); end

    # @private
    #
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:43
    def included(klass); end
  end

  module GeneratedClassMethods
    def assets_environment; end
    def assets_environment=(value); end
    def assets_environment?; end
    def assets_manifest; end
    def assets_manifest=(value); end
    def assets_manifest?; end
    def assets_precompile; end
    def assets_precompile=(value); end
    def assets_precompile?; end
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def check_precompiled_asset; end
    def check_precompiled_asset=(value); end
    def check_precompiled_asset?; end
    def debug_assets; end
    def debug_assets=(value); end
    def debug_assets?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
    def precompiled_asset_checker; end
    def precompiled_asset_checker=(value); end
    def precompiled_asset_checker?; end
    def resolve_assets_with; end
    def resolve_assets_with=(value); end
    def resolve_assets_with?; end
    def unknown_asset_fallback; end
    def unknown_asset_fallback=(value); end
    def unknown_asset_fallback?; end
  end

  module GeneratedInstanceMethods
    def assets_environment; end
    def assets_environment=(value); end
    def assets_environment?; end
    def assets_manifest; end
    def assets_manifest=(value); end
    def assets_manifest?; end
    def assets_precompile; end
    def assets_precompile=(value); end
    def assets_precompile?; end
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def check_precompiled_asset; end
    def check_precompiled_asset=(value); end
    def check_precompiled_asset?; end
    def debug_assets; end
    def debug_assets=(value); end
    def debug_assets?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
    def precompiled_asset_checker; end
    def precompiled_asset_checker=(value); end
    def precompiled_asset_checker?; end
    def resolve_assets_with; end
    def resolve_assets_with=(value); end
    def resolve_assets_with?; end
    def unknown_asset_fallback; end
    def unknown_asset_fallback=(value); end
    def unknown_asset_fallback?; end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:9
class Sprockets::Rails::Helper::AssetNotFound < ::StandardError; end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:10
class Sprockets::Rails::Helper::AssetNotPrecompiled < ::StandardError; end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:12
class Sprockets::Rails::Helper::AssetNotPrecompiledError < ::Sprockets::Rails::Helper::AssetNotPrecompiled
  include ::Sprockets::Rails::Utils

  # @return [AssetNotPrecompiledError] a new instance of AssetNotPrecompiledError
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:14
  def initialize(source); end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:35
Sprockets::Rails::Helper::VIEW_ACCESSORS = T.let(T.unsafe(nil), Array)

# Use a separate module since Helper is mixed in and we needn't pollute
# the class namespace with our internals.
#
# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:269
module Sprockets::Rails::HelperAssetResolvers
  class << self
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:270
    def [](name); end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:315
class Sprockets::Rails::HelperAssetResolvers::Environment
  # @raise [ArgumentError]
  # @return [Environment] a new instance of Environment
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:316
  def initialize(view); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:323
  def asset_path(path, digest, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:336
  def digest_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:357
  def find_asset(path, options = T.unsafe(nil)); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:347
  def find_debug_asset(path); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:343
  def integrity(path); end

  private

  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:367
  def precompiled?(path); end

  # @raise [Helper::AssetNotPrecompiledError]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:371
  def raise_unless_precompiled_asset(path); end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:281
class Sprockets::Rails::HelperAssetResolvers::Manifest
  # @raise [ArgumentError]
  # @return [Manifest] a new instance of Manifest
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:282
  def initialize(view); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:287
  def asset_path(path, digest, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:293
  def digest_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:303
  def find_debug_asset(path); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:297
  def integrity(path); end

  private

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/helper.rb:308
  def metadata(path); end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/quiet_assets.rb:3
class Sprockets::Rails::QuietAssets
  # @return [QuietAssets] a new instance of QuietAssets
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/quiet_assets.rb:4
  def initialize(app); end

  # source://sprockets-rails-3.4.2/lib/sprockets/rails/quiet_assets.rb:9
  def call(env); end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/route_wrapper.rb:3
module Sprockets::Rails::RouteWrapper
  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/route_wrapper.rb:9
  def internal?; end

  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/route_wrapper.rb:5
  def internal_assets_path?; end

  class << self
    # @private
    #
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/route_wrapper.rb:13
    def included(klass); end
  end
end

# Rewrites source mapping urls with the digested paths and protect against semicolon appending with a dummy comment line
#
# source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:4
class Sprockets::Rails::SourcemappingUrlProcessor
  class << self
    # source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:8
    def call(input); end

    private

    # source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:25
    def combine_sourcemap_logical_path(sourcefile:, sourcemap:); end

    # source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:47
    def removed_sourcemap_comment(sourcemap_logical_path, filename:, env:); end

    # source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:33
    def resolved_sourcemap_comment(sourcemap_logical_path, context:); end

    # source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:37
    def sourcemap_asset_path(sourcemap_logical_path, context:); end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/sourcemapping_url_processor.rb:5
Sprockets::Rails::SourcemappingUrlProcessor::REGEX = T.let(T.unsafe(nil), Regexp)

# source://sprockets-rails-3.4.2/lib/sprockets/rails/utils.rb:5
module Sprockets::Rails::Utils
  # @return [Boolean]
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/rails/utils.rb:6
  def using_sprockets4?; end
end

# source://sprockets-rails-3.4.2/lib/sprockets/rails/version.rb:3
Sprockets::Rails::VERSION = T.let(T.unsafe(nil), String)

# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:70
class Sprockets::Railtie < ::Rails::Railtie
  include ::Sprockets::Rails::Utils

  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:182
  def build_environment(app, initialized = T.unsafe(nil)); end

  class << self
    # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:213
    def build_manifest(app); end
  end
end

# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:88
Sprockets::Railtie::LOOSE_APP_ASSETS = T.let(T.unsafe(nil), Proc)

# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:73
class Sprockets::Railtie::ManifestNeededError < ::StandardError
  # @return [ManifestNeededError] a new instance of ManifestNeededError
  #
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:74
  def initialize; end
end

# source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:93
class Sprockets::Railtie::OrderedOptions < ::ActiveSupport::OrderedOptions
  # source://sprockets-rails-3.4.2/lib/sprockets/railtie.rb:94
  def configure(&block); end
end

# source://sprockets-3.7.2/lib/sprockets/sass_processor.rb:291
Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

# source://sprockets-3.7.2/lib/sprockets/version.rb:2
Sprockets::VERSION = T.let(T.unsafe(nil), String)
